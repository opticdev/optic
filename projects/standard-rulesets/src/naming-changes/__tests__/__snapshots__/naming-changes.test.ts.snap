// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`naming changes always pathComponents failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/usersList/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/usersList/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1usersList~1{userId}/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/usersList/{userId}",
      },
    },
    "condition": "path component must be param-case when always",
    "docsLink": undefined,
    "error": "usersList is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/usersList/{userId}",
  },
]
`;

exports[`naming changes always pathComponents failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/usersList/{userId}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/usersList/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/usersList/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1usersList~1{userId}/get",
        "kind": "operation",
      },
    },
    "condition": "path component must be param-case when added",
    "docsLink": undefined,
    "error": "usersList is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": false,
    "received": undefined,
    "where": "added operation: GET /api/usersList/{userId}",
  },
]
`;

exports[`naming changes always pathComponents failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/usersList/{userId}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/usersList/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/usersList/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1usersList~1{userId}/get",
        "kind": "operation",
      },
    },
    "condition": "path component must be param-case when addedOrChanged",
    "docsLink": undefined,
    "error": "usersList is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": false,
    "received": undefined,
    "where": "added operation: GET /api/usersList/{userId}",
  },
]
`;

exports[`naming changes always pathComponents passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users-list/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users-list/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users-list~1{userId}/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users-list/{userId}",
      },
    },
    "condition": "path component must be param-case when always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users-list/{userId}",
  },
]
`;

exports[`naming changes always pathComponents passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users-list/{userId}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users-list/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users-list/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users-list~1{userId}/get",
        "kind": "operation",
      },
    },
    "condition": "path component must be param-case when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users-list/{userId}",
  },
]
`;

exports[`naming changes always pathComponents passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users-list/{userId}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users-list/{userId}",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users-list/{}",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users-list~1{userId}/get",
        "kind": "operation",
      },
    },
    "condition": "path component must be param-case when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation path component naming check",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users-list/{userId}",
  },
]
`;

exports[`naming changes always queryParameters failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": Object {
        "description": "hi",
        "in": "query",
        "name": "snake_case",
      },
    },
    "condition": "query parameter must be camelCase when always",
    "docsLink": undefined,
    "error": "snake_case is not camelCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for query parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always queryParameters failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hi",
        "in": "query",
        "name": "snake_case",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "query parameter must be camelCase when added",
    "docsLink": undefined,
    "error": "snake_case is not camelCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "added query parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always queryParameters failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hi",
          "in": "query",
          "name": "snake_case",
        },
        "before": Object {
          "in": "query",
          "name": "snake_case",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "query parameter must be camelCase when addedOrChanged",
    "docsLink": undefined,
    "error": "snake_case is not camelCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "changed query parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always queryParameters passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "camelCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": Object {
        "description": "hi",
        "in": "query",
        "name": "camelCase",
      },
    },
    "condition": "query parameter must be camelCase when always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for query parameter: camelCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always queryParameters passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hi",
        "in": "query",
        "name": "camelCase",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "camelCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "query parameter must be camelCase when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "added query parameter: camelCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always queryParameters passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hi",
          "in": "query",
          "name": "camelCase",
        },
        "before": Object {
          "in": "query",
          "name": "camelCase",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "camelCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "query parameter must be camelCase when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "query parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "changed query parameter: camelCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "value": Object {
        "description": "hi",
        "in": "header",
        "name": "snake_case",
      },
    },
    "condition": "request header parameter must be PascalCase when always",
    "docsLink": undefined,
    "error": "snake_case is not PascalCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for header parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hi",
        "in": "header",
        "name": "snake_case",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "request header parameter must be PascalCase when added",
    "docsLink": undefined,
    "error": "snake_case is not PascalCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "added header parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hi",
          "in": "header",
          "name": "snake_case",
        },
        "before": Object {
          "in": "header",
          "name": "snake_case",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "snake_case",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "snake_case",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "request header parameter must be PascalCase when addedOrChanged",
    "docsLink": undefined,
    "error": "snake_case is not PascalCase",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "changed header parameter: snake_case in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "PascalCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "PascalCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "value": Object {
        "description": "hi",
        "in": "header",
        "name": "PascalCase",
      },
    },
    "condition": "request header parameter must be PascalCase when always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for header parameter: PascalCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hi",
        "in": "header",
        "name": "PascalCase",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "PascalCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "PascalCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "request header parameter must be PascalCase when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "added header parameter: PascalCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request header passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hi",
          "in": "header",
          "name": "PascalCase",
        },
        "before": Object {
          "in": "header",
          "name": "PascalCase",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "PascalCase",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "PascalCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "request header parameter must be PascalCase when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "changed header parameter: PascalCase in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "userName",
        "required": false,
      },
    },
    "condition": "property must be snake_case always",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for property: userName request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "userName",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when added",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": false,
    "received": undefined,
    "where": "added property: userName request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "description": "hi",
            "type": "string",
          },
          "key": "userName",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "userName",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when addedOrChanged",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": false,
    "received": undefined,
    "where": "changed property: userName request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "user_name",
        "required": false,
      },
    },
    "condition": "property must be snake_case always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for property: user_name request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "user_name",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": true,
    "received": undefined,
    "where": "added property: user_name request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always request property passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "description": "hi",
            "type": "string",
          },
          "key": "user_name",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "user_name",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property naming check",
    "passed": true,
    "received": undefined,
    "where": "changed property: user_name request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "camelCase",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/camelCase",
        "kind": "response-header",
      },
      "value": Object {
        "description": "hello",
        "name": "camelCase",
        "schema": Object {},
      },
    },
    "condition": "response header parameter must be param-case when always",
    "docsLink": undefined,
    "error": "camelCase is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for response header: camelCase in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "name": "camelCase",
        "schema": Object {},
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "camelCase",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/camelCase",
        "kind": "response-header",
      },
    },
    "condition": "response header parameter must be param-case when added",
    "docsLink": undefined,
    "error": "camelCase is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "added response header: camelCase in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hello",
          "name": "camelCase",
          "schema": Object {},
        },
        "before": Object {
          "name": "camelCase",
          "schema": Object {},
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "camelCase",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "camelCase",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/camelCase",
        "kind": "response-header",
      },
    },
    "condition": "response header parameter must be param-case when addedOrChanged",
    "docsLink": undefined,
    "error": "camelCase is not param-case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": false,
    "received": undefined,
    "where": "changed response header: camelCase in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "param-case",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "param-case",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/param-case",
        "kind": "response-header",
      },
      "value": Object {
        "description": "hello",
        "name": "param-case",
        "schema": Object {},
      },
    },
    "condition": "response header parameter must be param-case when always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for response header: param-case in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "name": "param-case",
        "schema": Object {},
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "param-case",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "param-case",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/param-case",
        "kind": "response-header",
      },
    },
    "condition": "response header parameter must be param-case when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "added response header: param-case in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response header passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "description": "hello",
          "name": "param-case",
          "schema": Object {},
        },
        "before": Object {
          "name": "param-case",
          "schema": Object {},
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "param-case",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "headers",
          "param-case",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/headers/param-case",
        "kind": "response-header",
      },
    },
    "condition": "response header parameter must be param-case when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "header parameter naming check",
    "passed": true,
    "received": undefined,
    "where": "changed response header: param-case in response status code: 200 in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "userName",
        "required": false,
      },
    },
    "condition": "property must be snake_case always",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": false,
    "received": undefined,
    "where": "requirement for property: userName in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property failing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "userName",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when added",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": false,
    "received": undefined,
    "where": "added property: userName in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property failing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "description": "hi",
            "type": "string",
          },
          "key": "userName",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "userName",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "userName",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "userName",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/userName",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when addedOrChanged",
    "docsLink": undefined,
    "error": "userName is not snake_case",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": false,
    "received": undefined,
    "where": "changed property: userName in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "user_name",
        "required": false,
      },
    },
    "condition": "property must be snake_case always",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": true,
    "received": undefined,
    "where": "requirement for property: user_name in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property passing assertion 2`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "hi",
          "type": "string",
        },
        "key": "user_name",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when added",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": true,
    "received": undefined,
    "where": "added property: user_name in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes always response property passing assertion 3`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "description": "hi",
            "type": "string",
          },
          "key": "user_name",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "user_name",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "user_name",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "user_name",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/user_name",
        "kind": "field",
      },
    },
    "condition": "property must be snake_case when addedOrChanged",
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property naming check",
    "passed": true,
    "received": undefined,
    "where": "changed property: user_name in response status code: 200 with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`naming changes configuration naming change configuration validation 1`] = `"Expected config object in NamingChangesRuleset"`;

exports[`naming changes configuration naming change configuration validation 2`] = `"Expected config.applies in NamingChangesRuleset to be specified and be one of added, addedOrChanged, always"`;

exports[`naming changes configuration naming change configuration validation 3`] = `"Expected config.applies in NamingChangesRuleset to be specified and be one of added, addedOrChanged, always"`;

exports[`naming changes configuration naming change configuration validation 4`] = `"Expected config.options in NamingChangesRuleset to have at least one value specified"`;

exports[`naming changes configuration naming change configuration validation 5`] = `"Expected casing option to be one of snake_case, camelCase, Capital-Param-Case, param-case, PascalCase, received not a valid format for queryParameters"`;
