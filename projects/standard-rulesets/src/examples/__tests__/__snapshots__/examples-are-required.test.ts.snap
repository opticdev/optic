// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`examples are required ruleset parameters need examples 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "query": "validExample",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "validExample",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": {
        "example": "123",
        "in": "query",
        "name": "validExample",
        "schema": {
          "type": "string",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter examples must match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users query parameter: validExample",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "query": "notSet",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "notSet",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/1",
        "kind": "query-parameter",
      },
      "value": {
        "in": "query",
        "name": "notSet",
        "schema": {
          "type": "string",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter examples must match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users query parameter: notSet",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "query": "validExample",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "validExample",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": {
        "example": "123",
        "in": "query",
        "name": "validExample",
        "schema": {
          "type": "string",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require parameter examples",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users query parameter: validExample",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "query": "notSet",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "notSet",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/1",
        "kind": "query-parameter",
      },
      "value": {
        "in": "query",
        "name": "notSet",
        "schema": {
          "type": "string",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "a valid example is required for every query parameter",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require parameter examples",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users query parameter: notSet",
  },
]
`;

exports[`examples are required ruleset request without example errors 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request body examples must match schema",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "POST /api/users request body: application/json",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "a valid example is required for every documented request body",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require request body examples",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "POST /api/users request body: application/json",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "post",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "post",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/post/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "hello",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require property examples match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "POST /api/users request body: application/json property: hello",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "world",
          ],
          "method": "post",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "post",
          "application/json",
          "world",
        ],
        "jsonPath": "/paths/~1api~1users/post/requestBody/content/application~1json/schema/properties/world",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "number",
        },
        "key": "world",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require property examples match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "POST /api/users request body: application/json property: world",
  },
]
`;

exports[`examples are required ruleset responses without examples error 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "a valid example is required for every documented response body",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require response body examples",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users response 200 response body: application/json",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "hello",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require property examples match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users response 200 response body: application/json property hello",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "world",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
          "application/json",
          "world",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200/content/application~1json/schema/properties/world",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "number",
        },
        "key": "world",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "require property examples match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users response 200 response body: application/json property world",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1api~1users/get/responses/200",
        "kind": "response",
      },
      "value": {
        "description": "ok",
        "statusCode": "200",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response body examples must match schemas",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users response 200",
  },
]
`;
