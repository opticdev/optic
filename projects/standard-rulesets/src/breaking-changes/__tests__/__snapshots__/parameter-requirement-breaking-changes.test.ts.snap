// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`breaking changes ruleset - parameter requirement change "cookie" parameter optional to required 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "cookie",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "not remove possible values from a cookie parameter enum",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent cookie parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed cookie parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "cookie",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "not add an enum to restrict possible values for a cookie parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent cookie parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed cookie parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "cookie",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "not change parameter type",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent cookie parameters type changes",
    "passed": true,
    "received": undefined,
    "where": "changed cookie parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "cookie",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "not make an optional cookie parameter required",
    "docsLink": undefined,
    "error": "cannot make an optional cookie parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent requiring existing cookie parameters",
    "passed": false,
    "received": undefined,
    "where": "changed cookie parameter: version in operation: GET /api/users",
  },
]
`;

exports[`breaking changes ruleset - parameter requirement change "header" parameter optional to required 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "header",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "not remove possible values from a header parameter enum",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent header parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed header parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "header",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "not add an enum to restrict possible values for a header parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent header parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed header parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "header",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "not change parameter type",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent header parameters type changes",
    "passed": true,
    "received": undefined,
    "where": "changed header parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "header",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "not make an optional header parameter required",
    "docsLink": undefined,
    "error": "cannot make an optional header parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent requiring existing header parameters",
    "passed": false,
    "received": undefined,
    "where": "changed header parameter: version in operation: GET /api/users",
  },
]
`;

exports[`breaking changes ruleset - parameter requirement change "query" parameter optional to required 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "not remove possible values from a query parameter enum",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent query parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed query parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "not add an enum to restrict possible values for a query parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent query parameters enum breaking changes",
    "passed": true,
    "received": undefined,
    "where": "changed query parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "not change parameter type",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent query parameters type changes",
    "passed": true,
    "received": undefined,
    "where": "changed query parameter: version in operation: GET /api/users",
  },
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "version",
          "required": true,
          "schema": Object {
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "version",
          "schema": Object {
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "not make an optional query parameter required",
    "docsLink": undefined,
    "error": "cannot make an optional query parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent requiring existing query parameters",
    "passed": false,
    "received": undefined,
    "where": "changed query parameter: version in operation: GET /api/users",
  },
]
`;

exports[`breaking changes ruleset - parameter requirement change required "cookie" parameter added 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "cookie",
        "name": "required",
        "required": true,
        "schema": Object {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "required",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "required",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "not add required cookie parameter",
    "docsLink": undefined,
    "error": "cannot add a required cookie parameter to an existing operation",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent new required cookie parameters",
    "passed": false,
    "received": undefined,
    "where": "added cookie parameter: required in operation: GET /api/users",
  },
]
`;

exports[`breaking changes ruleset - parameter requirement change required "header" parameter added 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "header",
        "name": "required",
        "required": true,
        "schema": Object {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "required",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "required",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "not add required header parameter",
    "docsLink": undefined,
    "error": "cannot add a required header parameter to an existing operation",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent new required header parameters",
    "passed": false,
    "received": undefined,
    "where": "added header parameter: required in operation: GET /api/users",
  },
]
`;

exports[`breaking changes ruleset - parameter requirement change required "query" parameter added 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "query",
        "name": "required",
        "required": true,
        "schema": Object {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "required",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "required",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "not add required query parameter",
    "docsLink": undefined,
    "error": "cannot add a required query parameter to an existing operation",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent new required query parameters",
    "passed": false,
    "received": undefined,
    "where": "added query parameter: required in operation: GET /api/users",
  },
]
`;
