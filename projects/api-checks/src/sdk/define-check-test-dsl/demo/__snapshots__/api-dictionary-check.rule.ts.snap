// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`failing case 1: adding with names not on whitelist 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "d",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "d",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "d",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/d",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "name d is not allowed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: d",
    },
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "e",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "e",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "e",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/e",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "name e is not allowed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: e",
    },
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "f",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "f",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "f",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/f",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "name f is not allowed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: f",
    },
  ],
}
`;

exports[`passing case 1: adding with names on whitelist 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "a",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "a",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "a",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/a",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: a",
    },
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "b",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "b",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "b",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/b",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: b",
    },
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "c",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "c",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "c",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/c",
          "kind": "field",
        },
      },
      "condition": "be named from whitelist",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: c",
    },
  ],
}
`;
