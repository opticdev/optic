// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`failing case 1: adding a camelCase when pascalCase is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: response body 'examplePropertyName'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: response body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 2: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;
