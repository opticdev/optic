// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`capture init init with --stdout 1`] = `
"capture:
  abc.yml:
    # üîß Runnable example with simple get requests. 
    # Run with "optic capture abc.yml --update interactive" 
    # You can change the server and the 'requests' section to experiment
    server:
      url: https://api.github.com
    requests:
      send:
        - path: /users/mojombo
          method: GET
        - path: /users/defunkt
          method: GET
        - path: /users/pjhyett/repos
          method: GET
        - path: /users/pjhyett/followers
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/github/repos
          method: GET
    # When you are ready, set up an actual integration that run your test suite
    # Read reference docs here: https://www.useoptic.com/docs/capturing-traffic#configuration-reference
    # server:
    #   # üîß Update this to the command to run your server.
    #   # Optional: If omitted, Optic assumes the server is running or started elsewhere.
    #   command: npm dev 
    #   # üîß Update this url to where your server can be reached.
    #   url: http://localhost:8080
    # requests:
    #   # ‚ÑπÔ∏è Requests should be sent to the Optic proxy, the address of which is injected into 'run.command's env as OPTIC_PROXY (or the value of 'run.proxy_variable').
    #   run:
    #     # üîß Specify a command that will generate traffic
    #     command: test
    #     # üîß OPTIC_PROXY is added to your command's env and contains the URL of an Optic's local reverse proxy. Your command should send its requests to this URL.
    #     proxy_variable: OPTIC_PROXY


"
`;

exports[`capture init init with existing optic.yml 1`] = `
"[32m‚úî[39m Wrote capture config to optic.yml
Run [1moptic capture abc.yml --update interactive[22m
"
`;

exports[`capture init init with existing optic.yml 2`] = `
"ruleset:
  - breaking-changes
  - naming:
      pathComponents: camelCase
  - '@org/custom-ruleset'
  - ./rules/local.js
capture:
  openapi.yml:
    server:
      command: node server.js
      url: http://localhost:3000
      ready_endpoint: /healthcheck
    requests:
      send:
        - path: /
        - path: /books
          method: GET
        - path: /books/asd
          method: GET
        - path: /books/def
          method: GET
        - path: /books/asd
          method: POST
          data:
            name: asd
            price: 1
            author_id: 6nTxAFM5ck4Hob77hGQoL
        - path: /authors
          method: GET
  abc.yml:
    # üîß Runnable example with simple get requests. 
    # Run with "optic capture abc.yml --update interactive" 
    # You can change the server and the 'requests' section to experiment
    server:
      url: https://api.github.com
    requests:
      send:
        - path: /users/mojombo
          method: GET
        - path: /users/defunkt
          method: GET
        - path: /users/pjhyett/repos
          method: GET
        - path: /users/pjhyett/followers
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/github/repos
          method: GET
    # When you are ready, set up an actual integration that run your test suite
    # Read reference docs here: https://www.useoptic.com/docs/capturing-traffic#configuration-reference
    # server:
    #   # üîß Update this to the command to run your server.
    #   # Optional: If omitted, Optic assumes the server is running or started elsewhere.
    #   command: npm dev 
    #   # üîß Update this url to where your server can be reached.
    #   url: http://localhost:8080
    # requests:
    #   # ‚ÑπÔ∏è Requests should be sent to the Optic proxy, the address of which is injected into 'run.command's env as OPTIC_PROXY (or the value of 'run.proxy_variable').
    #   run:
    #     # üîß Specify a command that will generate traffic
    #     command: test
    #     # üîß OPTIC_PROXY is added to your command's env and contains the URL of an Optic's local reverse proxy. Your command should send its requests to this URL.
    #     proxy_variable: OPTIC_PROXY
"
`;

exports[`capture init init with no optic.yml 1`] = `
"[32m‚úî[39m Wrote capture config to optic.yml
Run [1moptic capture abc.yml --update interactive[22m
"
`;

exports[`capture init init with no optic.yml 2`] = `
"capture:
  abc.yml:
    # üîß Runnable example with simple get requests. 
    # Run with "optic capture abc.yml --update interactive" 
    # You can change the server and the 'requests' section to experiment
    server:
      url: https://api.github.com
    requests:
      send:
        - path: /users/mojombo
          method: GET
        - path: /users/defunkt
          method: GET
        - path: /users/pjhyett/repos
          method: GET
        - path: /users/pjhyett/followers
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/opticdev/repos
          method: GET
        - path: /orgs/facebook/repos
          method: GET
        - path: /orgs/github/repos
          method: GET
    # When you are ready, set up an actual integration that run your test suite
    # Read reference docs here: https://www.useoptic.com/docs/capturing-traffic#configuration-reference
    # server:
    #   # üîß Update this to the command to run your server.
    #   # Optional: If omitted, Optic assumes the server is running or started elsewhere.
    #   command: npm dev 
    #   # üîß Update this url to where your server can be reached.
    #   url: http://localhost:8080
    # requests:
    #   # ‚ÑπÔ∏è Requests should be sent to the Optic proxy, the address of which is injected into 'run.command's env as OPTIC_PROXY (or the value of 'run.proxy_variable').
    #   run:
    #     # üîß Specify a command that will generate traffic
    #     command: test
    #     # üîß OPTIC_PROXY is added to your command's env and contains the URL of an Optic's local reverse proxy. Your command should send its requests to this URL.
    #     proxy_variable: OPTIC_PROXY
"
`;
