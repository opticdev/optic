// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`capture with inputs --har updating an OpenAPI spec 1`] = `
"GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'data' has been added (/properties/data)[39m
  [32m[200 response body] 'next' has been added (/properties/next)[39m
  [32m[200 response body] 'has_more_data' has been added (/properties/has_more_data)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /authors/{author}
POST /authors
GET /books/{book}
POST /books
GET /some/example
"
`;

exports[`capture with inputs --har updating an OpenAPI spec 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
    post:
      responses:
        "201":
          description: 201 response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/PostBooks201ResponseBody"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBooksRequestBody"
  /authors/{author}:
    parameters:
      - in: path
        name: author
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/GetAuthorsAuthor200ResponseBody"
  /authors:
    post:
      responses:
        "201":
          description: 201 response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/PostAuthors201ResponseBody"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostAuthorsRequestBody"
  /books/{book}:
    parameters:
      - in: path
        name: book
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/GetAuthorsAuthor200ResponseBody"
  /some/example:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSomeExample200ResponseBody"
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              author_id:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - name
              - author_id
              - created_at
              - updated_at
        next:
          nullable: true
        has_more_data:
          type: boolean
      required:
        - data
        - next
        - has_more_data
    GetAuthorsAuthor200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - created_at
        - updated_at
    PostAuthorsRequestBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    PostAuthors201ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    PostBooksRequestBody:
      type: object
      properties:
        name:
          type: string
        author_id:
          type: string
      required:
        - name
        - author_id
    PostBooks201ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
      required:
        - id
        - name
        - author_id
    GetSomeExample200ResponseBody:
      type: object
      properties:
        something:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              another:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                    max:
                      type: number
                    min:
                      type: number
                  required:
                    - path
                    - max
                    - min
                nullable: true
            required:
              - name
              - another
      required:
        - something
"
`;

exports[`capture with inputs --har verifying OpenAPI spec 1`] = `
"GET /books
  [31m× [39m200 response
  [31m[200 response body] 'data' is not documented (/properties)[39m
  [31m[200 response body] 'next' is not documented (/properties)[39m
  [31m[200 response body] 'has_more_data' is not documented (/properties)[39m

100.0% coverage of your documented operations. 7 requests did not match a documented path (8 total requests).
3 diffs detected in documented operations

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi.yml --update interactive' to add new endpoints[39m
"
`;

exports[`capture with inputs --postman updating an OpenAPI spec 1`] = `
"[90m1 endpoint did not receive traffic[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /auth/hawk
GET /basic-auth
GET /cookies/{cooky}
GET /cookies
GET /deflate
GET /delay/{delay}
DELETE /delete
GET /digest-auth
GET /encoding/utf8
GET /
GET /get/hello
GET /get
GET /gzip
GET /headers
GET /ip
GET /oauth1
PATCH /patch
POST /post
PUT /put
GET /response-headers
GET /status/{status}
GET /stream/{stream}
GET /time/{time}
POST /transform/collection
"
`;

exports[`capture with inputs --postman updating an OpenAPI spec 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
  /auth/hawk:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthHawk200ResponseBody"
  /basic-auth:
    get:
      responses:
        {}
  /cookies/{cooky}:
    parameters:
      - in: path
        name: cooky
        required: true
        schema:
          type: string
    get:
      responses:
        {}
      parameters:
        - schema:
            type: string
          in: query
          name: foo1
          required: true
        - schema:
            type: string
          in: query
          name: foo2
          required: true
  /cookies:
    get:
      responses:
        {}
  /deflate:
    get:
      responses:
        {}
  /delay/{delay}:
    parameters:
      - in: path
        name: delay
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDelayDelay200ResponseBody"
  /delete:
    delete:
      responses:
        {}
      requestBody:
        content:
          text/plain:
            schema:
              type: string
  /digest-auth:
    get:
      responses:
        {}
  /encoding/utf8:
    get:
      responses:
        {}
  /:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Get200ResponseBody"
  /get/hello:
    get:
      responses:
        {}
  /get:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGet200ResponseBody"
      parameters:
        - schema:
            type: string
          in: query
          name: foo1
          required: true
        - schema:
            type: string
          in: query
          name: foo2
          required: true
  /gzip:
    get:
      responses:
        {}
  /headers:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHeaders200ResponseBody"
  /ip:
    get:
      responses:
        {}
  /oauth1:
    get:
      responses:
        "401":
          description: 401 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOauth1401ResponseBody"
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthHawk200ResponseBody"
  /patch:
    patch:
      responses:
        {}
      requestBody:
        content:
          text/plain:
            schema:
              type: string
  /post:
    post:
      responses:
        {}
      requestBody:
        content:
          text/plain:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: string
  /put:
    put:
      responses:
        {}
      requestBody:
        content:
          text/plain:
            schema:
              type: string
          application/json:
            schema:
              $ref: "#/components/schemas/PutPutRequestBody"
  /response-headers:
    get:
      responses:
        "200":
          description: 200 response
          content:
            text/html:
              schema:
                type: string
      parameters:
        - schema:
            type: string
          in: query
          name: foo1
          required: true
        - schema:
            type: string
          in: query
          name: foo2
          required: true
        - schema:
            type: string
          in: query
          name: Content-Type
          required: true
        - schema:
            type: string
          in: query
          name: test
          required: true
  /status/{status}:
    parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStatusStatus200ResponseBody"
  /stream/{stream}:
    parameters:
      - in: path
        name: stream
        required: true
        schema:
          type: string
    get:
      responses:
        {}
  /time/{time}:
    parameters:
      - in: path
        name: time
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeTime200ResponseBody"
      parameters:
        - schema:
            type: string
          in: query
          name: timestamp
          required: false
        - schema:
            type: string
          in: query
          name: format
          required: true
        - schema:
            type: string
          in: query
          name: unit
          required: true
        - schema:
            type: string
          in: query
          name: years
          required: true
        - schema:
            type: string
          in: query
          name: target
          required: true
        - schema:
            type: string
          in: query
          name: start
          required: true
        - schema:
            type: string
          in: query
          name: end
          required: true
  /transform/collection:
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostTransformCollection200ResponseBody"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransformCollectionRequestBody"
      parameters:
        - schema:
            type: string
          in: query
          name: from
          required: true
        - schema:
            type: string
          in: query
          name: to
          required: true
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
    GetAuthHawk200ResponseBody:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - status
        - message
    GetDelayDelay200ResponseBody:
      type: object
      properties:
        delay:
          type: string
      required:
        - delay
    Get200ResponseBody:
      type: object
      properties:
        authenticated:
          type: boolean
        cookies:
          type: object
          properties:
            foo1:
              type: string
            foo2:
              type: string
          required:
            - foo2
      required:
        - cookies
    GetGet200ResponseBody:
      type: object
      properties:
        args:
          type: object
          properties:
            foo1:
              type: string
            foo2:
              type: string
          required:
            - foo1
            - foo2
        headers:
          type: object
          properties:
            x-forwarded-proto:
              type: string
            host:
              type: string
            accept:
              type: string
            accept-encoding:
              type: string
            cache-control:
              type: string
            postman-token:
              type: string
            user-agent:
              type: string
            x-forwarded-port:
              type: string
          required:
            - x-forwarded-proto
            - host
            - accept
            - accept-encoding
            - cache-control
            - postman-token
            - user-agent
            - x-forwarded-port
        url:
          type: string
      required:
        - args
        - headers
        - url
    GetHeaders200ResponseBody:
      type: object
      properties:
        headers:
          type: object
          properties:
            host:
              type: string
            accept:
              type: string
            accept-encoding:
              type: string
            accept-language:
              type: string
            cache-control:
              type: string
            my-sample-header:
              type: string
            postman-token:
              type: string
            user-agent:
              type: string
            x-forwarded-port:
              type: string
            x-forwarded-proto:
              type: string
          required:
            - host
            - accept
            - accept-encoding
            - accept-language
            - cache-control
            - my-sample-header
            - postman-token
            - user-agent
            - x-forwarded-port
            - x-forwarded-proto
      required:
        - headers
    GetOauth1401ResponseBody:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        base_uri:
          type: string
        normalized_param_string:
          type: string
        base_string:
          type: string
        signing_key:
          type: string
      required:
        - status
        - message
        - base_uri
        - normalized_param_string
        - base_string
        - signing_key
    PutPutRequestBody:
      oneOf:
        - type: object
          properties:
            hello:
              type: string
            my:
              type: number
            name:
              type: boolean
            is:
              type: object
              properties:
                legally:
                  type: string
                num:
                  type: number
                mixed:
                  type: array
                  items:
                    oneOf:
                      - type: object
                        properties:
                          name:
                            type: string
                        required:
                          - name
                      - type: boolean
                      - type: string
                      - type: number
              required:
                - legally
                - num
                - mixed
          required:
            - hello
            - my
            - name
            - is
        - type: array
          items:
            type: object
            properties:
              hello:
                type: string
              my:
                type: number
              name:
                type: boolean
              is:
                type: object
                properties:
                  legally:
                    type: string
                  num:
                    type: number
                  mixed:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            name:
                              type: string
                          required:
                            - name
                        - type: boolean
                        - type: string
                        - type: number
                required:
                  - legally
                  - num
                  - mixed
              authenticated:
                type: boolean
            required:
              []
        - type: array
          items:
            type: object
            properties:
              hello:
                type: string
              my:
                type: number
              name:
                type: boolean
              is:
                type: object
              authenticated:
                type: boolean
            required:
              - hello
              - my
              - name
              - is
              - authenticated
    GetStatusStatus200ResponseBody:
      type: object
      properties:
        status:
          type: number
      required:
        - status
    GetTimeTime200ResponseBody:
      type: object
      properties:
        valid:
          type: boolean
      required:
        - valid
    PostTransformCollectionRequestBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        order:
          type: array
          items:
            type: string
        folders:
          type: array
          items:
            {}
        requests:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              collectionId:
                type: string
              method:
                type: string
              headers:
                type: string
              data:
                type: array
                items:
                  {}
              rawModeData:
                type: string
              tests:
                type: string
              preRequestScript:
                type: string
              url:
                type: string
              dataMode:
                type: string
            required:
              - id
              - name
              - collectionId
              - method
              - headers
              - data
              - rawModeData
              - url
        info:
          type: object
          properties:
            name:
              type: string
            schema:
              type: string
            description:
              type: string
          required:
            - name
            - schema
            - description
        item:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              request:
                type: object
                properties:
                  url:
                    type: string
                  method:
                    type: string
                  header:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      required:
                        - key
                        - value
                  body:
                    type: object
                    properties:
                      mode:
                        type: string
                      raw:
                        type: string
                    required:
                      - mode
                      - raw
                required:
                  - url
                  - method
              event:
                type: array
                items:
                  type: object
                  properties:
                    listen:
                      type: string
                    script:
                      type: object
                      properties:
                        type:
                          type: string
                        exec:
                          type: array
                          items:
                            type: string
                      required:
                        - type
                        - exec
                  required:
                    - listen
                    - script
            required:
              - name
              - request
      required:
        - info
        - item
    PostTransformCollection200ResponseBody:
      type: object
      properties:
        variables:
          type: array
          items:
            {}
        info:
          type: object
          properties:
            name:
              type: string
            _postman_id:
              type: string
            description:
              type: string
            schema:
              type: string
          required:
            - name
            - _postman_id
            - description
            - schema
        item:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              event:
                type: array
                items:
                  type: object
                  properties:
                    listen:
                      type: string
                    script:
                      type: object
                      properties:
                        type:
                          type: string
                        exec:
                          type: array
                          items:
                            type: string
                      required:
                        - type
                        - exec
                  required:
                    - listen
                    - script
              request:
                type: object
                properties:
                  url:
                    type: string
                  method:
                    type: string
                  header:
                    type: array
                    items:
                      {}
                  body:
                    type: object
                    properties:
                      mode:
                        type: string
                      raw:
                        type: string
                    required:
                      - mode
                      - raw
                required:
                  - url
                  - method
                  - header
                  - body
              response:
                type: array
                items:
                  {}
            required:
              - name
              - request
              - response
        id:
          type: string
        name:
          type: string
        description:
          type: string
        order:
          type: array
          items:
            type: string
        folders:
          type: array
          items:
            {}
        requests:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              collectionId:
                type: string
              method:
                type: string
              headers:
                type: string
              data:
                type: array
                items:
                  {}
              rawModeData:
                type: string
              tests:
                type: string
              preRequestScript:
                type: string
              url:
                type: string
              dataMode:
                type: string
            required:
              - id
              - name
              - collectionId
              - method
              - headers
              - data
              - rawModeData
              - url
      required:
        - id
        - name
        - description
        - order
        - folders
        - requests
"
`;

exports[`capture with inputs --postman verifying OpenAPI spec 1`] = `
"[90m1 endpoint did not receive traffic[39m

0.0% coverage of your documented operations. 58 requests did not match a documented path (58 total requests).

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi.yml --update interactive' to add new endpoints[39m
"
`;

exports[`capture with requests update behavior handle server path prefixes in spec 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'author_id' has been added (/properties/books/items/properties/author_id)[39m
  [32m[200 response body] 'status' has been added (/properties/books/items/properties/status)[39m
  [32m[200 response body] 'price' has been added (/properties/books/items/properties/price)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /authors
GET /books/{book}
POST /books
"
`;

exports[`capture with requests update behavior handle server path prefixes in spec 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
servers:
  - name: server
    url: http://localhost:PORT/api
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/PostBooksRequestBody"
  /authors:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthors200ResponseBody"
  /books/{book}:
    parameters:
      - in: path
        name: book
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              author_id:
                type: string
              status:
                type: string
              price:
                type: number
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - name
              - author_id
              - status
              - price
              - created_at
              - updated_at
    GetAuthors200ResponseBody:
      type: object
      properties:
        authors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - name
              - created_at
              - updated_at
      required:
        - authors
    GetBooksBook200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
        status:
          type: string
        price:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - author_id
        - status
        - price
        - created_at
        - updated_at
    PostBooksRequestBody:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        author_id:
          type: string
      required:
        - name
        - price
        - author_id
"
`;

exports[`capture with requests update behavior handle server path prefixes in spec and in optic.yml 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'author_id' has been added (/properties/books/items/properties/author_id)[39m
  [32m[200 response body] 'status' has been added (/properties/books/items/properties/status)[39m
  [32m[200 response body] 'price' has been added (/properties/books/items/properties/price)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /authors
GET /books/{book}
POST /books
"
`;

exports[`capture with requests update behavior handle server path prefixes in spec and in optic.yml 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
servers:
  - name: server
    url: http://localhost:PORT/api
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/PostBooksRequestBody"
  /authors:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthors200ResponseBody"
  /books/{book}:
    parameters:
      - in: path
        name: book
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              author_id:
                type: string
              status:
                type: string
              price:
                type: number
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - name
              - author_id
              - status
              - price
              - created_at
              - updated_at
    GetAuthors200ResponseBody:
      type: object
      properties:
        authors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - name
              - created_at
              - updated_at
      required:
        - authors
    GetBooksBook200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
        status:
          type: string
        price:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - author_id
        - status
        - price
        - created_at
        - updated_at
    PostBooksRequestBody:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        author_id:
          type: string
      required:
        - name
        - price
        - author_id
"
`;

exports[`capture with requests update behavior handle servers not at root of host 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'author_id' has been added (/properties/books/items/properties/author_id)[39m
  [32m[200 response body] 'status' has been added (/properties/books/items/properties/status)[39m
  [32m[200 response body] 'price' has been added (/properties/books/items/properties/price)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /authors
GET /books/{book}
POST /books
"
`;

exports[`capture with requests update behavior handle servers not at root of host 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/PostBooksRequestBody"
  /authors:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthors200ResponseBody"
  /books/{book}:
    parameters:
      - in: path
        name: book
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              author_id:
                type: string
              status:
                type: string
              price:
                type: number
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - name
              - author_id
              - status
              - price
              - created_at
              - updated_at
    GetAuthors200ResponseBody:
      type: object
      properties:
        authors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - name
              - created_at
              - updated_at
      required:
        - authors
    GetBooksBook200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
        status:
          type: string
        price:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - author_id
        - status
        - price
        - created_at
        - updated_at
    PostBooksRequestBody:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        author_id:
          type: string
      required:
        - name
        - price
        - author_id
"
`;

exports[`capture with requests update behavior handles update in other file 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'author_id' has been added (/properties/books/items/properties/author_id)[39m
  [32m[200 response body] 'status' has been added (/properties/books/items/properties/status)[39m
  [32m[200 response body] 'price' has been added (/properties/books/items/properties/price)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m
"
`;

exports[`capture with requests update behavior handles update in other file 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: ./components/books.yml#/GetBooks200ResponseBody
"
`;

exports[`capture with requests update behavior handles update in other file 3`] = `
"GetBooks200ResponseBody:
  type: object
  properties:
    books:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          author_id:
            type: string
          status:
            type: string
          price:
            type: number
          created_at:
            type: string
          updated_at:
            type: string
        required:
          - name
          - author_id
          - status
          - price
          - created_at
          - updated_at
"
`;

exports[`capture with requests update behavior respects x-optic-path-ignore 1`] = `
"Generating traffic to send to server
GET /authors
  [32m✓ [39m200 response
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'author_id' has been added (/properties/books/items/properties/author_id)[39m
  [32m[200 response body] 'status' has been added (/properties/books/items/properties/status)[39m
  [32m[200 response body] 'price' has been added (/properties/books/items/properties/price)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
POST /books
"
`;

exports[`capture with requests update behavior respects x-optic-path-ignore 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
x-optic-path-ignore:
  - method: get
    path: /books/**
  - /authors
paths:
  /books:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooks200ResponseBody"
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostBooks200ResponseBody"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/PostBooksRequestBody"
  /authors:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              author_id:
                type: string
              status:
                type: string
              price:
                type: number
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - name
              - author_id
              - status
              - price
              - created_at
              - updated_at
    PostBooksRequestBody:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        author_id:
          type: string
      required:
        - name
        - price
        - author_id
    PostBooks200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
        status:
          type: string
        price:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - author_id
        - status
        - price
        - created_at
        - updated_at
"
`;

exports[`capture with requests update behavior updates all endpoints with --update automatic 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m
  [33m[200 response body] 'author_id' is now type number (/properties/books/items/properties/author_id)[39m
  [33m[200 response body] 'status' now has enum value 'hold' (/properties/books/items/properties/status/enum)[39m
  [31m[200 response body] schema (/properties/books/items/properties/price/maximum) with keyword 'maximum' and parameters {"comparison":"<=","limit":6} received invalid values 10, 15[39m
  [31m ⛔️ schema could not be automatically updated. Update the schema manually at [4mopenapi.yml:55:1281[24m[39m
POST /books
  [32m✓ [39mRequest Body, [32m✓ [39m200 response
  [32m[200 response body] body has been added[39m
  [33m[request body] 'price' is now type string (/properties/price)[39m

[1m[90mLearning path patterns for unmatched requests...[39m[22m
[1m[90mDocumenting new operations:[39m[22m
GET /authors
GET /books/{book}
GET /
"
`;

exports[`capture with requests update behavior updates all endpoints with --update automatic 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - 'name'
                - 'price'
                - 'author_id'
              properties:
                name:
                  type: string
                price:
                  oneOf:
                    - type: string
                    - type: number
                author_id:
                  type: string
      "responses":
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  author_id:
                    type: string
                  status:
                    type: string
                  price:
                    type: number
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                  - id
                  - name
                  - author_id
                  - status
                  - price
                  - created_at
                  - updated_at
    get:
      # a comment about something
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                # use the refs here
                $ref: "#/components/schemas/GetBooks200ResponseBody"
  /authors:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthors200ResponseBody"
  /books/{book}:
    parameters:
      - in: path
        name: book
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooksBook200ResponseBody"
  /:
    get:
      responses:
        "200":
          description: 200 response
          content:
            text/html:
              schema:
                type: string
components:
  schemas:
    # this is a schema
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              author_id:
                oneOf:
                  - type: number
                  - type: string
              status:
                type: string
                enum:
                  - ready
                  - not_ready
                  - hold
              price:
                type: number
                maximum: 6
                minimum: 2
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - author_id
              - name
              - created_at
              - updated_at
    GetAuthors200ResponseBody:
      type: object
      properties:
        authors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - name
              - created_at
              - updated_at
      required:
        - authors
    GetBooksBook200ResponseBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author_id:
          type: string
        status:
          type: string
        price:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - author_id
        - status
        - price
        - created_at
        - updated_at
"
`;

exports[`capture with requests update behavior updates only existing endpoints by default 1`] = `
"Generating traffic to send to server
GET /books
  [32m✓ [39m200 response
  [32m[200 response body] 'name' has been added (/properties/books/items/properties/name)[39m
  [32m[200 response body] 'created_at' has been added (/properties/books/items/properties/created_at)[39m
  [32m[200 response body] 'updated_at' has been added (/properties/books/items/properties/updated_at)[39m
  [33m[200 response body] 'author_id' is now type number (/properties/books/items/properties/author_id)[39m
  [33m[200 response body] 'status' now has enum value 'hold' (/properties/books/items/properties/status/enum)[39m
  [31m[200 response body] schema (/properties/books/items/properties/price/maximum) with keyword 'maximum' and parameters {"comparison":"<=","limit":6} received invalid values 10, 15[39m
  [31m ⛔️ schema could not be automatically updated. Update the schema manually at [4mopenapi.yml:55:1281[24m[39m
POST /books
  [32m✓ [39mRequest Body, [32m✓ [39m200 response
  [32m[200 response body] body has been added[39m
  [33m[request body] 'price' is now type string (/properties/price)[39m

4 unmatched requests

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi.yml --update interactive' to add new endpoints[39m
"
`;

exports[`capture with requests update behavior updates only existing endpoints by default 2`] = `
"openapi: 3.0.3
info:
  title: a spec
  description: The API
  version: 0.1.0
paths:
  /books:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - 'name'
                - 'price'
                - 'author_id'
              properties:
                name:
                  type: string
                price:
                  oneOf:
                    - type: string
                    - type: number
                author_id:
                  type: string
      "responses":
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  author_id:
                    type: string
                  status:
                    type: string
                  price:
                    type: number
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                  - id
                  - name
                  - author_id
                  - status
                  - price
                  - created_at
                  - updated_at
    get:
      # a comment about something
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                # use the refs here
                $ref: "#/components/schemas/GetBooks200ResponseBody"
components:
  schemas:
    # this is a schema
    GetBooks200ResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              author_id:
                oneOf:
                  - type: number
                  - type: string
              status:
                type: string
                enum:
                  - ready
                  - not_ready
                  - hold
              price:
                type: number
                maximum: 6
                minimum: 2
              name:
                type: string
              created_at:
                type: string
              updated_at:
                type: string
            required:
              - id
              - author_id
              - name
              - created_at
              - updated_at
"
`;

exports[`capture with requests verify behavior verifies spec with endpoint specificity 1`] = `
"Generating traffic to send to server
GET /books/status
  [32m✓ [39m200 response
GET /books/{bookId}
  [31m× [39m200 response
  [31m[200 response body] 'status' is not documented (/properties)[39m
  [31m[200 response body] 'price' is not documented (/properties)[39m
GET /books
  200 response
  [31m[404 response body] body is not documented[39m
  [31m[query parameter] list is not documented[39m

83.3% coverage of your documented operations. 2 requests did not match a documented path (6 total requests).
4 diffs detected in documented operations

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi-with-overlapping-paths.yml --update interactive' to add new endpoints[39m
"
`;

exports[`capture with requests verify behavior verifies the specification in verbose mode 1`] = `
"Generating traffic to send to server
GET /books
  [31m× [39m200 response
  [31m[200 response body] 'name' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'created_at' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'updated_at' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'author_id' does not match type number. Received 6nTxAFM5ck4Hob77hGQoL (/properties/books/items/properties/author_id)[39m
  [41m  Diff  [49m 'author_id' did not match schema
[90m43 |[39m properties:
[90m44 |[39m   id:
[90m45 |[39m     type: string
[90m46 |[39m [1m[33m  author_id:  [41m[Actual] "6nTxAFM5ck4Hob77hGQoL"[49m[39m[22m
[90m47 |[39m     type: number
[90m48 |[39m   status:
[90m49 |[39m     type: string
[90m$workspace$/openapi.yml[39m

  [31m[200 response body] 'status' missing enum value 'hold' (/properties/books/items/properties/status/enum)[39m
  [41m  Diff  [49m 'status' does not have enum value hold
[90m47 |[39m   type: number
[90m48 |[39m status:
[90m49 |[39m   type: string
[90m50 |[39m [1m[33m  enum:  [41mmissing enum value 'hold'[49m[39m[22m
[90m51 |[39m     - ready
[90m52 |[39m     - not_ready
[90m53 |[39m price:
[90m$workspace$/openapi.yml[39m

  [31m[200 response body] schema (/properties/books/items/properties/price/maximum) with keyword 'maximum' and parameters {"comparison":"<=","limit":6} received invalid values 10, 15[39m
  [41m  Diff  [49m interaction did not match schema
[90m52 |[39m       - not_ready
[90m53 |[39m   price:
[90m54 |[39m     type: number
[90m55 |[39m [1m[33m    maximum: 6  [41m[Actual] 10, 15[49m[39m[22m
[90m56 |[39m     minimum: 2
[90m57 |[39m required:
[90m58 |[39m   - id
[90m$workspace$/openapi.yml[39m

POST /books
  [31m× [39mRequest Body
  [31m[200 response body] body is not documented[39m
  [31m[request body] 'price' does not match type string. Received 1 (/properties/price)[39m
  [41m  Diff  [49m 'price' did not match schema
[90m15 |[39m properties:
[90m16 |[39m   name:
[90m17 |[39m     type: string
[90m18 |[39m [1m[33m  price:  [41m[Actual] 1[49m[39m[22m
[90m19 |[39m     type: string
[90m20 |[39m   author_id:
[90m21 |[39m     type: string
[90m$workspace$/openapi.yml[39m


100.0% coverage of your documented operations. 4 requests did not match a documented path (6 total requests).
12 diffs detected in documented operations

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi.yml --update interactive' to add new endpoints[39m
"
`;

exports[`capture with requests verify behavior verifies the specification with coverage 1`] = `
"Generating traffic to send to server
GET /books
  [31m× [39m200 response
  [31m[200 response body] 'name' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'created_at' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'updated_at' is not documented (/properties/books/items/properties)[39m
  [31m[200 response body] 'author_id' does not match type number. Received 6nTxAFM5ck4Hob77hGQoL (/properties/books/items/properties/author_id)[39m
  [31m[200 response body] 'status' missing enum value 'hold' (/properties/books/items/properties/status/enum)[39m
  [31m[200 response body] schema (/properties/books/items/properties/price/maximum) with keyword 'maximum' and parameters {"comparison":"<=","limit":6} received invalid values 10, 15[39m
POST /books
  [31m× [39mRequest Body
  [31m[200 response body] body is not documented[39m
  [31m[request body] 'price' does not match type string. Received 1 (/properties/price)[39m

100.0% coverage of your documented operations. 4 requests did not match a documented path (6 total requests).
8 diffs detected in documented operations

[33mNew endpoints are only added in interactive mode. Run 'optic capture openapi.yml --update interactive' to add new endpoints[39m
"
`;
