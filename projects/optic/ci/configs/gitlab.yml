# This script handles two different events in two different ways.
#
# For a push event on the default branch, it simply runs a diff against the
# previous version and upload the run. That keeps a running log of the history
# of your default branch.
#
# For a merge request, it runs a diff against the base of the merge request. That
# gives you a set of changes that have occurred in the merge request. It also
# runs `optic ci comment` to add a comment to the merge request, giving you a
# a summary of the changes and checks you've run right in the merge request web
# interface.

# on push, diff with the previous commit
optic-diff-push:
  image: node:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  script:
    # Uncomment if you need to generate your spec before running Optic:
    # - ./generate_spec.example.sh
    - npm install -g @useoptic/optic

    # Update the "match" glob pattern to match your specs. Examples: "openapi.yml" or "openapi.yml,other.yml" or "*.openapi.yml"
    - optic diff-all --check --upload --head-tag "gitbranch:$CI_COMMIT_REF_NAME"  --compare-from cloud:default --match ""

# on merge request, diff with the base and post a comment
optic-diff-merge-request:
  image: node:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $OPTIC_TOKEN
  script:
    # Uncomment if you need to generate your spec before running Optic:
    # - ./generate_spec.example.sh
    - npm install -g @useoptic/optic
    - git fetch origin --depth=1 $CI_MERGE_REQUEST_DIFF_BASE_SHA

    # run optic diff and record the result, but don't fail if optic fails
    # Update the "match" glob pattern to match your specs. Examples: "openapi.yml" or "openapi.yml,other.yml" or "*.openapi.yml"
    - export OPTIC_RESULT=0; optic diff-all --check --upload --head-tag "gitbranch:$CI_COMMIT_REF_NAME" --compare-from cloud:default --match "" || export OPTIC_RESULT=$?

    # add a comment on the merge request
    - if [ -n "${OPTIC_GITLAB_TOKEN}" ]; then GITLAB_TOKEN=$OPTIC_GITLAB_TOKEN optic ci comment --provider gitlab --project-id $CI_PROJECT_ID --merge-request-id $CI_MERGE_REQUEST_IID --sha $CI_COMMIT_SHA; fi;

    # comment out the next line if you don't want to fail CI when checks fail
    - if [ $OPTIC_RESULT -ne 0 ]; then exit 1; fi;

