// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`operation metadata summary fails if missing 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have a summary",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected undefined to exist",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata summary passes if provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have a summary",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata tags fail is not provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
        },
      },
      "condition": "have tags",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected undefined to exist",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata tags passes if > 1 tag provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have tags",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation parameters names fails if the case isn't correct 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/example/{pathParameter}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example/{pathParameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
        ],
        "jsonPath": "/paths/~1example~1{pathParameter}/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "in": "path",
        "name": "pathParameter",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "pathParameter",
          },
          "method": "get",
          "path": "/example/{pathParameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
          "parameters",
          "path",
          "pathParameter",
        ],
        "jsonPath": "/paths/~1example~1{pathParameter}/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example/{pathParameter}": Object {
        "get": Object {
          "parameters": Array [
            Object {
              "in": "path",
              "name": "pathParameter",
            },
          ],
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example/{pathParameter}",
          },
          "conceptualPath": Array [
            "operations",
            "/example/{}",
            "get",
          ],
          "jsonPath": "/paths/~1example~1{pathParameter}/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "pathPattern": "/example/{pathParameter}",
        },
      },
      "condition": "use the correct case",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected parameter name \\"pathParameter\\" to be snake_case (path_parameter): expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example/{pathParameter}",
    },
  ],
}
`;

exports[`operation parameters names fails if the default value is changed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "schema": Object {
                "default": "before",
                "type": "string",
              },
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "query_parameter",
          "schema": Object {
            "default": "after",
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "query_parameter",
          "schema": Object {
            "default": "before",
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "schema": Object {
                "default": "after",
                "type": "string",
              },
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "query_parameter",
            "schema": Object {
              "default": "after",
              "type": "string",
            },
          },
          "before": Object {
            "in": "query",
            "name": "query_parameter",
            "schema": Object {
              "default": "before",
              "type": "string",
            },
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not change the default value",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 'before' to equal 'after'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names fails when adding a required query parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "in": "query",
        "name": "query_parameter",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "required": true,
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "query_parameter",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected true to be false",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names fails when changing optional to required query parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "query_parameter",
          "required": true,
        },
        "before": Object {
          "in": "query",
          "name": "query_parameter",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "required": true,
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "query_parameter",
            "required": true,
          },
          "before": Object {
            "in": "query",
            "name": "query_parameter",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be optional then required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected true to be false",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names passes if the case is correct 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/example/{path_parameter}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example/{path_parameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
        ],
        "jsonPath": "/paths/~1example~1{path_parameter}/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "in": "path",
        "name": "path_parameter",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "path_parameter",
          },
          "method": "get",
          "path": "/example/{path_parameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
          "parameters",
          "path",
          "path_parameter",
        ],
        "jsonPath": "/paths/~1example~1{path_parameter}/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example/{path_parameter}": Object {
        "get": Object {
          "parameters": Array [
            Object {
              "in": "path",
              "name": "path_parameter",
            },
          ],
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example/{path_parameter}",
          },
          "conceptualPath": Array [
            "operations",
            "/example/{}",
            "get",
          ],
          "jsonPath": "/paths/~1example~1{path_parameter}/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "pathPattern": "/example/{path_parameter}",
        },
      },
      "condition": "use the correct case",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example/{path_parameter}",
    },
  ],
}
`;

exports[`operation parameters status codes fails when a status codes is removed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {
            "200": Object {
              "description": "Example response",
            },
          },
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1example/get/responses/200",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "description": "Example response",
          "statusCode": "200",
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
          ],
          "jsonPath": "/paths/~1example/get/responses/200",
          "kind": "response",
        },
        "removed": Object {
          "before": Object {
            "description": "Example response",
            "statusCode": "200",
          },
        },
      },
      "condition": "not be removed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 200 to be present: expected false to be true",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed response: 200",
    },
  ],
}
`;

exports[`operation parameters version parameter fails when there is no version parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "include a version parameter",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected [] to include 'version'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation parameters version parameter passes if there is a version parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "in": "query",
        "name": "version",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "version",
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "use the correct case",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails if changed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example",
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "example2",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "operationId": "example",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example2",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "example2",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "operationId": "example",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have consistent operation IDs",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 'example' to equal 'example2'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails if removed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example",
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "operationId": "example",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "operationId": "example",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have consistent operation IDs",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 'example' to equal undefined",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails when camel case and valid prefix but no suffix 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "get",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "get",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "operationId \\"get\\" must be camelCase (get) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId missing fails if empty string 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected '' to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId missing fails if undefined 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected undefined to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId passes when camel case and has a hump 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getYesHump",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getYesHump",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getYesHump",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId when set fails if not camel case 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-hello-world",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "get-hello-world",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "get-hello-world",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "operationId \\"get-hello-world\\" must be camelCase (getHelloWorld) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId when set fails if prefix is wrong 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "findHelloWorld",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "findHelloWorld",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "findHelloWorld",
          "pathPattern": "/example",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "operationId \\"findHelloWorld\\" must be camelCase (findHelloWorld) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;
