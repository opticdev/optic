// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`json builder arrays [known limitation] -- empty arrays will never learn their types, must be set by user 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Array [],
  "jsonSchemaForInput": Object {
    "items": Object {},
    "type": "array",
  },
}
`;

exports[`json builder arrays can learn an array of object items 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Array [
    Object {
      "field": 1,
    },
    Object {
      "field": 2,
    },
    Object {
      "field": 3,
    },
  ],
  "jsonSchemaForInput": Object {
    "items": Object {
      "properties": Object {
        "field": Object {
          "type": "number",
        },
      },
      "required": Array [
        "field",
      ],
      "type": "object",
    },
    "type": "array",
  },
}
`;

exports[`json builder arrays can learn an array of object items with polymorphism 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Array [
    Object {
      "field": 1,
    },
    Object {
      "field": 2,
    },
    Object {
      "field": 3,
      "field2": "",
    },
  ],
  "jsonSchemaForInput": Object {
    "items": Object {
      "properties": Object {
        "field": Object {
          "type": "number",
        },
        "field2": Object {
          "type": "string",
        },
      },
      "required": Array [
        "field",
      ],
      "type": "object",
    },
    "type": "array",
  },
}
`;

exports[`json builder arrays can learn an array of primitive items 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Array [
    "a",
    "b",
    "c",
  ],
  "jsonSchemaForInput": Object {
    "items": Object {
      "type": "string",
    },
    "type": "array",
  },
}
`;

exports[`json builder arrays can learn an array with polymorphism, that can also be an object 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Array [
    Object {
      "food": "rice",
    },
    Object {
      "food": "cookies",
    },
    Object {
      "food": "chips",
    },
  ],
  "jsonSchemaForInput": Object {
    "oneOf": Array [
      Object {
        "items": Object {
          "oneOf": Array [
            Object {
              "properties": Object {
                "food": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "food",
              ],
              "type": "object",
            },
            Object {
              "type": "string",
            },
          ],
        },
        "type": "array",
      },
      Object {
        "properties": Object {
          "nemesis": Object {
            "type": "string",
          },
        },
        "required": Array [
          "nemesis",
        ],
        "type": "object",
      },
    ],
  },
}
`;

exports[`json builder arrays can learn an object, that can also be an array with polymorphism 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "nemesis": "Brad",
  },
  "jsonSchemaForInput": Object {
    "oneOf": Array [
      Object {
        "properties": Object {
          "nemesis": Object {
            "type": "string",
          },
        },
        "required": Array [
          "nemesis",
        ],
        "type": "object",
      },
      Object {
        "items": Object {
          "properties": Object {
            "food": Object {
              "type": "string",
            },
          },
          "required": Array [
            "food",
          ],
          "type": "object",
        },
        "type": "array",
      },
    ],
  },
}
`;

exports[`json builder objects can learn an object with primitive fields 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "age": 145,
    "hello": "world",
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "age": Object {
        "type": "number",
      },
      "hello": Object {
        "type": "string",
      },
    },
    "required": Array [
      "hello",
      "age",
    ],
    "type": "object",
  },
}
`;

exports[`json builder objects can learn nested objects 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "age": 145,
    "hello": "world",
    "nested": Object {
      "nested2": Object {
        "nested3": Object {
          "stringField": "abc",
        },
      },
    },
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "age": Object {
        "type": "number",
      },
      "hello": Object {
        "type": "string",
      },
      "nested": Object {
        "properties": Object {
          "nested2": Object {
            "properties": Object {
              "nested3": Object {
                "properties": Object {
                  "stringField": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "stringField",
                ],
                "type": "object",
              },
            },
            "required": Array [
              "nested3",
            ],
            "type": "object",
          },
        },
        "required": Array [
          "nested2",
        ],
        "type": "object",
      },
    },
    "required": Array [
      "hello",
      "age",
      "nested",
    ],
    "type": "object",
  },
}
`;

exports[`json builder objects can learn that an object with primitive fields is polymorphic 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "age": 145,
    "hello": "world",
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "admin": Object {
        "type": "boolean",
      },
      "age": Object {
        "type": "number",
      },
      "hello": Object {
        "type": "string",
      },
    },
    "required": Array [
      "age",
    ],
    "type": "object",
  },
}
`;

exports[`json builder oneOfs are built correctly can learn an array of objects 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "name": Object {
      "first": "Bob",
      "last": "C",
    },
    "rivals": Array [
      Object {
        "food": "rice",
      },
      Object {
        "food": "cookies",
      },
      Object {
        "food": "chips",
      },
    ],
    "stats": Object {
      "rank": 1,
    },
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "name": Object {
        "properties": Object {
          "first": Object {
            "type": "string",
          },
          "last": Object {
            "type": "string",
          },
        },
        "required": Array [
          "first",
          "last",
        ],
        "type": "object",
      },
      "rivals": Object {
        "items": Object {
          "properties": Object {
            "food": Object {
              "type": "string",
            },
          },
          "required": Array [
            "food",
          ],
          "type": "object",
        },
        "type": "array",
      },
      "stats": Object {
        "properties": Object {
          "rank": Object {
            "type": "number",
          },
        },
        "required": Array [
          "rank",
        ],
        "type": "object",
      },
    },
    "required": Array [
      "name",
      "rivals",
      "stats",
    ],
    "type": "object",
  },
}
`;

exports[`json builder oneOfs are built correctly can learn an array of objects with polymorphism 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "name": Object {
      "first": "Bob",
      "last": "C",
    },
    "rivals": Array [
      Object {
        "food": "rice",
      },
      Object {
        "food": "cookies",
      },
      Object {
        "food": "chips",
      },
      "none",
    ],
    "stats": Object {
      "rank": 1,
    },
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "name": Object {
        "properties": Object {
          "first": Object {
            "type": "string",
          },
          "last": Object {
            "type": "string",
          },
        },
        "required": Array [
          "first",
          "last",
        ],
        "type": "object",
      },
      "rivals": Object {
        "items": Object {
          "oneOf": Array [
            Object {
              "properties": Object {
                "food": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "food",
              ],
              "type": "object",
            },
            Object {
              "type": "string",
            },
          ],
        },
        "type": "array",
      },
      "stats": Object {
        "properties": Object {
          "rank": Object {
            "type": "number",
          },
        },
        "required": Array [
          "rank",
        ],
        "type": "object",
      },
    },
    "required": Array [
      "name",
      "rivals",
      "stats",
    ],
    "type": "object",
  },
}
`;

exports[`json builder oneOfs are built correctly can learn an array of objects with polymorphism when primitive value seen first 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "name": Object {
      "first": "Bob",
      "last": "C",
    },
    "rivals": Array [
      "none",
      Object {
        "hello": "world",
      },
    ],
    "stats": Object {
      "rank": 1,
    },
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "name": Object {
        "properties": Object {
          "first": Object {
            "type": "string",
          },
          "last": Object {
            "type": "string",
          },
        },
        "required": Array [
          "first",
          "last",
        ],
        "type": "object",
      },
      "rivals": Object {
        "items": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "properties": Object {
                "hello": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "hello",
              ],
              "type": "object",
            },
          ],
        },
        "type": "array",
      },
      "stats": Object {
        "properties": Object {
          "rank": Object {
            "type": "number",
          },
        },
        "required": Array [
          "rank",
        ],
        "type": "object",
      },
    },
    "required": Array [
      "name",
      "rivals",
      "stats",
    ],
    "type": "object",
  },
}
`;

exports[`json builder oneOfs are built correctly can polymorphism between instances of objects and arrays 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": Object {
    "location": Object {
      "principality": Object {
        "city": "San Fransisco",
        "coordinates": Array [
          1,
          2,
          3,
        ],
        "population": 830000,
      },
    },
  },
  "jsonSchemaForInput": Object {
    "properties": Object {
      "location": Object {
        "properties": Object {
          "principality": Object {
            "properties": Object {
              "city": Object {
                "type": "string",
              },
              "coordinates": Object {
                "oneOf": Array [
                  Object {
                    "items": Object {
                      "type": "number",
                    },
                    "type": "array",
                  },
                  Object {
                    "properties": Object {
                      "format": Object {
                        "type": "string",
                      },
                      "lat": Object {
                        "type": "string",
                      },
                      "long": Object {
                        "type": "string",
                      },
                    },
                    "required": Array [
                      "format",
                      "lat",
                      "long",
                    ],
                    "type": "object",
                  },
                ],
              },
              "population": Object {
                "type": "number",
              },
            },
            "required": Array [
              "city",
              "population",
              "coordinates",
            ],
            "type": "object",
          },
        },
        "required": Array [
          "principality",
        ],
        "type": "object",
      },
    },
    "required": Array [
      "location",
    ],
    "type": "object",
  },
}
`;

exports[`json builder oneOfs are built correctly one of array or object 1`] = `
Object {
  "oneOf": Array [
    Object {
      "properties": Object {
        "nemesis": Object {
          "type": "string",
        },
      },
      "required": Array [
        "nemesis",
      ],
      "type": "object",
    },
    Object {
      "items": Object {
        "oneOf": Array [
          Object {
            "properties": Object {
              "food": Object {
                "type": "string",
              },
            },
            "required": Array [
              "food",
            ],
            "type": "object",
          },
          Object {
            "type": "string",
          },
        ],
      },
      "type": "array",
    },
  ],
}
`;

exports[`json builder primitives can build JSON from a boolean 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": true,
  "jsonSchemaForInput": Object {
    "type": "boolean",
  },
}
`;

exports[`json builder primitives can build JSON from a null 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": null,
  "jsonSchemaForInput": Object {
    "type": "null",
  },
}
`;

exports[`json builder primitives can build JSON from a number 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": 1544,
  "jsonSchemaForInput": Object {
    "type": "number",
  },
}
`;

exports[`json builder primitives can build JSON from a string 1`] = `
Object {
  "diffBetweenGeneratedAndInput": Array [],
  "input": "string value",
  "jsonSchemaForInput": Object {
    "type": "string",
  },
}
`;
