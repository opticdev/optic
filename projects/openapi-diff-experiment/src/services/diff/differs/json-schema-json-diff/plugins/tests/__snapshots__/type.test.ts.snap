// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`type json schema differ plugin when provided with an array, it can apply patches 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": Array [
        "1",
        "2",
        "3",
        true,
      ],
      "instancePath": "/stringField",
      "key": "stringField",
      "keyword": "type",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "stringField",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/stringField",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "items": Object {
                    "oneOf": Array [
                      Object {
                        "type": "string",
                      },
                      Object {
                        "type": "boolean",
                      },
                    ],
                  },
                  "type": "array",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "make stringField oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add stringField one of",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/stringField/oneOf",
                  "value": Array [
                    Object {
                      "type": "string",
                    },
                    Object {
                      "items": Object {
                        "oneOf": Array [
                          Object {
                            "type": "string",
                          },
                          Object {
                            "type": "boolean",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  ],
                },
              ],
            },
            Object {
              "intent": "remove type after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/properties/stringField/type",
                },
              ],
            },
          ],
        },
      },
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "type": "array",
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "change type of stringField",
          "extends": false,
          "patch": Array [
            Object {
              "intent": "change stringField type",
              "patches": Array [
                Object {
                  "op": "replace",
                  "path": "/properties/stringField",
                  "value": Object {
                    "type": "array",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`type json schema differ plugin when provided with an object, it can apply patches 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": Object {
        "field": "string",
      },
      "instancePath": "/stringField",
      "key": "stringField",
      "keyword": "type",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "stringField",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/stringField",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "properties": Object {
                    "field": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "field",
                  ],
                  "type": "object",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "make stringField oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add stringField one of",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/stringField/oneOf",
                  "value": Array [
                    Object {
                      "type": "string",
                    },
                    Object {
                      "properties": Object {
                        "field": Object {
                          "type": "string",
                        },
                      },
                      "required": Array [
                        "field",
                      ],
                      "type": "object",
                    },
                  ],
                },
              ],
            },
            Object {
              "intent": "remove type after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/properties/stringField/type",
                },
              ],
            },
          ],
        },
      },
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "properties": Object {
                "field": Object {
                  "type": "string",
                },
              },
              "required": Array [
                "field",
              ],
              "type": "object",
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "change type of stringField",
          "extends": false,
          "patch": Array [
            Object {
              "intent": "change stringField type",
              "patches": Array [
                Object {
                  "op": "replace",
                  "path": "/properties/stringField",
                  "value": Object {
                    "properties": Object {
                      "field": Object {
                        "type": "string",
                      },
                    },
                    "required": Array [
                      "field",
                    ],
                    "type": "object",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`type json schema differ plugin when provided with another primitive, it can apply patches 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": 123,
      "instancePath": "/stringField",
      "key": "stringField",
      "keyword": "type",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "stringField",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/stringField",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "type": "number",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "make stringField oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add stringField one of",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/stringField/oneOf",
                  "value": Array [
                    Object {
                      "type": "string",
                    },
                    Object {
                      "type": "number",
                    },
                  ],
                },
              ],
            },
            Object {
              "intent": "remove type after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/properties/stringField/type",
                },
              ],
            },
          ],
        },
      },
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "type": "number",
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "change type of stringField",
          "extends": false,
          "patch": Array [
            Object {
              "intent": "change stringField type",
              "patches": Array [
                Object {
                  "op": "replace",
                  "path": "/properties/stringField",
                  "value": Object {
                    "type": "number",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`type json schema differ plugin when provided with null value, it can apply patches 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": null,
      "instancePath": "/stringField",
      "key": "stringField",
      "keyword": "type",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "stringField",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/stringField",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "type": "null",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "make stringField oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add stringField one of",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/stringField/oneOf",
                  "value": Array [
                    Object {
                      "type": "string",
                    },
                    Object {
                      "type": "null",
                    },
                  ],
                },
              ],
            },
            Object {
              "intent": "remove type after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/properties/stringField/type",
                },
              ],
            },
          ],
        },
      },
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "stringField": Object {
              "type": "null",
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "change type of stringField",
          "extends": false,
          "patch": Array [
            Object {
              "intent": "change stringField type",
              "patches": Array [
                Object {
                  "op": "replace",
                  "path": "/properties/stringField",
                  "value": Object {
                    "type": "null",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;
