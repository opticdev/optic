// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`one of json schema differ plugin can add an additional branch to a complex one of 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": Array [
        1,
        2,
        3,
      ],
      "instancePath": "/location/principality/coordinates",
      "key": "oneOf",
      "keyword": "oneOf",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "location",
          "principality",
          "coordinates",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/location/properties/principality/properties/coordinates/oneOf",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "location": Object {
              "properties": Object {
                "principality": Object {
                  "properties": Object {
                    "array": Object {
                      "items": Object {
                        "type": "number",
                      },
                      "type": "array",
                    },
                    "city": Object {
                      "type": "string",
                    },
                    "coordinates": Object {
                      "oneOf": Array [
                        Object {
                          "properties": Object {
                            "format": Object {
                              "type": "string",
                            },
                            "lat": Object {
                              "type": "string",
                            },
                            "long": Object {
                              "type": "string",
                            },
                          },
                          "required": Array [],
                          "type": "object",
                        },
                        Object {
                          "type": "string",
                        },
                        Object {
                          "items": Object {
                            "type": "number",
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "motto": Object {
                      "type": "string",
                    },
                    "population": Object {
                      "type": "number",
                    },
                  },
                  "required": Array [
                    "city",
                    "population",
                  ],
                  "type": "object",
                },
              },
              "required": Array [
                "principality",
              ],
              "type": "object",
            },
          },
          "required": Array [
            "location",
          ],
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "expand one of for oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add new oneOf type to oneOf",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/location/properties/principality/properties/coordinates/oneOf/-",
                  "value": Object {
                    "items": Object {
                      "type": "number",
                    },
                    "type": "array",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`one of json schema differ plugin when new field in one of object variant of one of 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": Object {
        "polyProp": Object {
          "hello": "world",
        },
      },
      "instancePath": "/polyProp/hello",
      "key": "hello",
      "keyword": "additionalProperties",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "polyProp",
        ],
        "method": "post",
        "path": "/example",
      },
      "parentObjectPath": "/properties/polyProp/oneOf/0/additionalProperties",
      "propertyExamplePath": "/polyProp/hello",
      "propertyPath": "/properties/polyProp/oneOf/0/additionalProperties/hello",
      "schemaPath": "",
      "type": "BodyAdditionalProperty",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "polyProp": Object {
              "oneOf": Array [
                Object {
                  "properties": Object {
                    "hello": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "hello",
                  ],
                  "type": "object",
                },
                Object {
                  "type": "number",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Compatible",
          "effect": "add property hello",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add required [] to parent object",
              "patches": Array [
                Object {
                  "extra": "same",
                  "op": "add",
                  "path": "/properties/polyProp/oneOf/0/required",
                  "value": Array [],
                },
              ],
            },
            Object {
              "intent": "add property hello schema to properties",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/polyProp/oneOf/0/properties/hello",
                  "value": Object {
                    "type": "string",
                  },
                },
              ],
            },
            Object {
              "intent": "make new property hello required",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/polyProp/oneOf/0/required/-",
                  "value": "hello",
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`one of json schema differ plugin when new primitive types provided to existing one of  1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": true,
      "instancePath": "/polyProp",
      "key": "oneOf",
      "keyword": "oneOf",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [
          "polyProp",
        ],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "/properties/polyProp/oneOf",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "properties": Object {
            "polyProp": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "type": "number",
                },
                Object {
                  "type": "boolean",
                },
              ],
            },
          },
          "type": "object",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "expand one of for oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add new oneOf type to oneOf",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/properties/polyProp/oneOf/-",
                  "value": Object {
                    "type": "boolean",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;

exports[`one of json schema differ plugin when root schema is obejct and is shown an array 1`] = `
Object {
  "0": Object {
    "diff": Object {
      "example": Array [],
      "instancePath": "",
      "key": "",
      "keyword": "type",
      "location": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "jsonSchemaTrail": Array [],
        "method": "post",
        "path": "/example",
      },
      "propertyPath": "",
      "schemaPath": "",
      "type": "BodyUnmatchedType",
    },
    "patchesExecuted": Array [
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "oneOf": Array [
            Object {
              "properties": Object {
                "sup": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
            Object {
              "items": Object {},
              "type": "array",
            },
          ],
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "make  oneOf",
          "extends": true,
          "patch": Array [
            Object {
              "intent": "add  one of",
              "patches": Array [
                Object {
                  "op": "add",
                  "path": "/oneOf",
                  "value": Array [
                    Object {
                      "properties": Object {
                        "sup": Object {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    Object {
                      "items": Object {},
                      "type": "array",
                    },
                  ],
                },
              ],
            },
            Object {
              "intent": "remove type after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/type",
                },
              ],
            },
            Object {
              "intent": "remove properties after after changing to a oneOf",
              "patches": Array [
                Object {
                  "op": "remove",
                  "path": "/properties",
                },
              ],
            },
          ],
        },
      },
      Object {
        "newDiffs": Array [],
        "newJsonSchema": Object {
          "type": "array",
        },
        "patch": Object {
          "classification": "Incompatible",
          "effect": "change type of ",
          "extends": false,
          "patch": Array [
            Object {
              "intent": "change  type",
              "patches": Array [
                Object {
                  "op": "replace",
                  "path": "",
                  "value": Object {
                    "type": "array",
                  },
                },
              ],
            },
          ],
        },
      },
    ],
  },
  "totalDiffsAfterPatches": 0,
}
`;
