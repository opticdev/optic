// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`changelog selector chaining multiple selectors 1`] = `
ChangelogSelector {
  "changelog": Array [
    Object {
      "added": Object {
        "description": "Status values that need to be considered for filter",
        "explode": true,
        "in": "query",
        "name": "status",
        "required": true,
        "schema": Object {
          "items": Object {
            "default": "available",
            "enum": Array [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "style": "form",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "status",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "parameters",
          "query",
          "status",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    Object {
      "added": Object {
        "description": "Tags to filter by",
        "explode": true,
        "in": "query",
        "name": "tags",
        "required": true,
        "schema": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "style": "form",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "tags",
          },
          "method": "get",
          "path": "/pet/findByTags",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByTags",
          "get",
          "parameters",
          "query",
          "tags",
        ],
        "jsonPath": "/paths/~1pet~1findByTags/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
}
`;

exports[`changelog selector filter only operation 1`] = `
ChangelogSelector {
  "changelog": Array [
    Object {
      "added": Object {
        "description": "Multiple status values can be provided with comma separated strings",
        "method": "get",
        "operationId": "findPetsByStatus",
        "pathPattern": "/pet/findByStatus",
        "security": Array [
          Object {
            "petstore_auth": Array [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": Array [
          "pet",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "description": "Status values that need to be considered for filter",
        "explode": true,
        "in": "query",
        "name": "status",
        "required": true,
        "schema": Object {
          "items": Object {
            "default": "available",
            "enum": Array [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "style": "form",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "status",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "parameters",
          "query",
          "status",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    Object {
      "added": Object {
        "contentType": "application/xml",
        "flatSchema": Object {
          "type": "array",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/xml",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "responses",
          "200",
          "application/xml",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200/content/application~1xml",
        "kind": "body",
      },
    },
    Object {
      "added": Object {
        "contentType": "application/json",
        "flatSchema": Object {
          "type": "array",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200/content/application~1json",
        "kind": "body",
      },
    },
    Object {
      "added": Object {
        "description": "successful operation",
        "statusCode": "200",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200",
        "kind": "response",
      },
    },
    Object {
      "added": Object {
        "description": "Invalid status value",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/responses/400",
        "kind": "response",
      },
    },
  ],
}
`;

exports[`changelog selector filter to kind 1`] = `
ChangelogSelector {
  "changelog": Array [
    Object {
      "added": Object {
        "description": "Status values that need to be considered for filter",
        "explode": true,
        "in": "query",
        "name": "status",
        "required": true,
        "schema": Object {
          "items": Object {
            "default": "available",
            "enum": Array [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "type": "array",
        },
        "style": "form",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "status",
          },
          "method": "get",
          "path": "/pet/findByStatus",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByStatus",
          "get",
          "parameters",
          "query",
          "status",
        ],
        "jsonPath": "/paths/~1pet~1findByStatus/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    Object {
      "added": Object {
        "description": "Tags to filter by",
        "explode": true,
        "in": "query",
        "name": "tags",
        "required": true,
        "schema": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "style": "form",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "tags",
          },
          "method": "get",
          "path": "/pet/findByTags",
        },
        "conceptualPath": Array [
          "operations",
          "/pet/findByTags",
          "get",
          "parameters",
          "query",
          "tags",
        ],
        "jsonPath": "/paths/~1pet~1findByTags/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "example-query-param",
          },
          "method": "get",
          "path": "/user/{username}",
        },
        "conceptualPath": Array [
          "operations",
          "/user/{}",
          "get",
          "parameters",
          "query",
          "example-query-param",
        ],
        "jsonPath": "/paths/~1user~1{username}/parameters/0",
        "kind": "query-parameter",
      },
      "removed": Object {
        "before": Object {
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "in": "query",
          "name": "example-query-param",
          "required": false,
          "schema": Object {
            "type": "string",
          },
        },
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "example-query-param",
          },
          "method": "put",
          "path": "/user/{username}",
        },
        "conceptualPath": Array [
          "operations",
          "/user/{}",
          "put",
          "parameters",
          "query",
          "example-query-param",
        ],
        "jsonPath": "/paths/~1user~1{username}/parameters/0",
        "kind": "query-parameter",
      },
      "removed": Object {
        "before": Object {
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "in": "query",
          "name": "example-query-param",
          "required": false,
          "schema": Object {
            "type": "string",
          },
        },
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "example-query-param",
          },
          "method": "delete",
          "path": "/user/{username}",
        },
        "conceptualPath": Array [
          "operations",
          "/user/{}",
          "delete",
          "parameters",
          "query",
          "example-query-param",
        ],
        "jsonPath": "/paths/~1user~1{username}/parameters/0",
        "kind": "query-parameter",
      },
      "removed": Object {
        "before": Object {
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "in": "query",
          "name": "example-query-param",
          "required": false,
          "schema": Object {
            "type": "string",
          },
        },
      },
    },
  ],
}
`;

exports[`changelog selector find children 1`] = `
Array [
  Object {
    "added": Object {
      "description": "Status values that need to be considered for filter",
      "explode": true,
      "in": "query",
      "name": "status",
      "required": true,
      "schema": Object {
        "items": Object {
          "default": "available",
          "enum": Array [
            "available",
            "pending",
            "sold",
          ],
          "type": "string",
        },
        "type": "array",
      },
      "style": "form",
    },
    "changeType": "added",
    "location": Object {
      "conceptualLocation": Object {
        "inRequest": Object {
          "query": "status",
        },
        "method": "get",
        "path": "/pet/findByStatus",
      },
      "conceptualPath": Array [
        "operations",
        "/pet/findByStatus",
        "get",
        "parameters",
        "query",
        "status",
      ],
      "jsonPath": "/paths/~1pet~1findByStatus/get/parameters/0",
      "kind": "query-parameter",
    },
  },
  Object {
    "added": Object {
      "contentType": "application/xml",
      "flatSchema": Object {
        "type": "array",
      },
    },
    "changeType": "added",
    "location": Object {
      "conceptualLocation": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/xml",
          },
          "statusCode": "200",
        },
        "method": "get",
        "path": "/pet/findByStatus",
      },
      "conceptualPath": Array [
        "operations",
        "/pet/findByStatus",
        "get",
        "responses",
        "200",
        "application/xml",
      ],
      "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200/content/application~1xml",
      "kind": "body",
    },
  },
  Object {
    "added": Object {
      "contentType": "application/json",
      "flatSchema": Object {
        "type": "array",
      },
    },
    "changeType": "added",
    "location": Object {
      "conceptualLocation": Object {
        "inResponse": Object {
          "body": Object {
            "contentType": "application/json",
          },
          "statusCode": "200",
        },
        "method": "get",
        "path": "/pet/findByStatus",
      },
      "conceptualPath": Array [
        "operations",
        "/pet/findByStatus",
        "get",
        "responses",
        "200",
        "application/json",
      ],
      "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200/content/application~1json",
      "kind": "body",
    },
  },
  Object {
    "added": Object {
      "description": "successful operation",
      "statusCode": "200",
    },
    "changeType": "added",
    "location": Object {
      "conceptualLocation": Object {
        "inResponse": Object {
          "statusCode": "200",
        },
        "method": "get",
        "path": "/pet/findByStatus",
      },
      "conceptualPath": Array [
        "operations",
        "/pet/findByStatus",
        "get",
        "responses",
        "200",
      ],
      "jsonPath": "/paths/~1pet~1findByStatus/get/responses/200",
      "kind": "response",
    },
  },
  Object {
    "added": Object {
      "description": "Invalid status value",
      "statusCode": "400",
    },
    "changeType": "added",
    "location": Object {
      "conceptualLocation": Object {
        "inResponse": Object {
          "statusCode": "400",
        },
        "method": "get",
        "path": "/pet/findByStatus",
      },
      "conceptualPath": Array [
        "operations",
        "/pet/findByStatus",
        "get",
        "responses",
        "400",
      ],
      "jsonPath": "/paths/~1pet~1findByStatus/get/responses/400",
      "kind": "response",
    },
  },
]
`;

exports[`changelog selector find parent 1`] = `
Object {
  "added": Object {
    "description": "Multiple status values can be provided with comma separated strings",
    "method": "get",
    "operationId": "findPetsByStatus",
    "pathPattern": "/pet/findByStatus",
    "security": Array [
      Object {
        "petstore_auth": Array [
          "write:pets",
          "read:pets",
        ],
      },
    ],
    "summary": "Finds Pets by status",
    "tags": Array [
      "pet",
    ],
  },
  "changeType": "added",
  "location": Object {
    "conceptualLocation": Object {
      "method": "get",
      "path": "/pet/findByStatus",
    },
    "conceptualPath": Array [
      "operations",
      "/pet/findByStatus",
      "get",
    ],
    "jsonPath": "/paths/~1pet~1findByStatus/get",
    "kind": "operation",
  },
}
`;
