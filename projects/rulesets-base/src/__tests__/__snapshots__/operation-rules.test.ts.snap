// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OperationRule assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "operation does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "method": "post",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "post",
        ],
        "jsonPath": "/paths/~1api~1users/post",
        "kind": "operation",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: POST /api/users",
  },
]
`;

exports[`OperationRule assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-users-changed",
          "pathPattern": "/api/users",
        },
        "before": Object {
          "method": "get",
          "operationId": "get-users",
          "pathPattern": "/api/users",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "must not change an operationId",
    "docsLink": undefined,
    "error": "cannot change operationId",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation operationId",
    "passed": false,
    "received": undefined,
    "where": "changed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-users",
          "pathPattern": "/api/users",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "must not change an operationId",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation operationId",
    "passed": true,
    "received": undefined,
    "where": "changed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasCookieParameterMatching failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have cookie parameter matching shape",
    "docsLink": undefined,
    "error": "Could not find a partial match in cookie parameters. Value to match: {\\"description\\":\\"Matcher.string\\"}",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasCookieParameterMatching inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "not have cookie parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasCookieParameterMatching passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have cookie parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasHeaderParameterMatching failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have header parameter matching shape",
    "docsLink": undefined,
    "error": "Could not find a partial match in header parameters. Value to match: {\\"description\\":\\"Matcher.string\\"}",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasHeaderParameterMatching inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "not have header parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasHeaderParameterMatching passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have header parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasPathParameterMatching failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have path parameter matching shape",
    "docsLink": undefined,
    "error": "Could not find a partial match in path parameters. Value to match: {\\"description\\":\\"Matcher.string\\"}",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasPathParameterMatching inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "not have path parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasPathParameterMatching passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have path parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasQueryParameterMatching failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have query parameter matching shape",
    "docsLink": undefined,
    "error": "Could not find a partial match in query parameters",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasQueryParameterMatching inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "not have query parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasQueryParameterMatching passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "have query parameter matching shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasRequests failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-users",
          "pathPattern": "/api/users",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "have requests with content-type",
    "docsLink": undefined,
    "error": "Operation does not have request with content-type application/json",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": undefined,
    "where": "changed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasRequests inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-users",
          "pathPattern": "/api/users",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "not have requests with content-type",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "changed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasRequests passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-users",
          "pathPattern": "/api/users",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "have requests with content-type",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "changed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasResponses failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
    },
    "condition": "have responses",
    "docsLink": undefined,
    "error": "Operation does not have response with content-type application/json for status code 400 ",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": undefined,
    "where": "removed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasResponses inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
    },
    "condition": "not have responses",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "removed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers hasResponses passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
    },
    "condition": "have responses",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "removed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matches failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": "Expected a partial match",
    "exempted": false,
    "expected": "{\\"description\\":\\"Matcher.string\\"}",
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": "{\\"responses\\":{}}",
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matches inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "not match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matches passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matches with custom message 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": "this is a custom message",
    "exempted": false,
    "expected": "{\\"description\\":\\"Matcher.string\\"}",
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": "{\\"responses\\":{}}",
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matchesOneOf failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": "Expected at least one partial match",
    "exempted": false,
    "expected": "[{\\"description\\":\\"Matcher.string\\"},{\\"summary\\":\\"Matcher.string\\"}]",
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": "{\\"responses\\":{}}",
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matchesOneOf inverted assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "not match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers matchesOneOf passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions custom matchers not does not bleed into different assertions 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "method": "get",
        "pathPattern": "/api/users",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
    },
    "condition": "not match expected shape",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "added operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
        },
      },
    },
    "condition": "must not remove an operation without summary \`hello\`",
    "docsLink": undefined,
    "error": "cannot remove an operation",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation removal",
    "passed": false,
    "received": undefined,
    "where": "removed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "pathPattern": "/api/users",
          "summary": "hello",
        },
      },
    },
    "condition": "must not remove an operation without summary \`hello\`",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation removal",
    "passed": true,
    "received": undefined,
    "where": "removed operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "operation does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": false,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
        ],
        "jsonPath": "/paths/~1api~1users/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "hello",
        "method": "get",
        "pathPattern": "/api/users",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "operation description",
    "passed": true,
    "received": undefined,
    "where": "requirement for operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "cookie",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "added cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "in": "cookie",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "added cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "new-param",
          "required": true,
        },
        "before": Object {
          "in": "cookie",
          "name": "new-param",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": "cannot make parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": false,
    "received": undefined,
    "where": "changed cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "cookie",
          "name": "new-param",
        },
        "before": Object {
          "in": "cookie",
          "name": "new-param",
          "required": true,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": true,
    "received": undefined,
    "where": "changed cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "cookie",
          "name": "new-param",
          "required": true,
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": "required parameter cannot be removed",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": false,
    "received": undefined,
    "where": "removed cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "cookie",
          "name": "new-param",
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": true,
    "received": undefined,
    "where": "removed cookie parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
      "value": Object {
        "in": "cookie",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for cookie parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule cookieParameter assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "cookie": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "cookie",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "cookie-parameter",
      },
      "value": Object {
        "description": "hello",
        "in": "cookie",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for cookie parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "header",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "added header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "in": "header",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "added header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "new-param",
          "required": true,
        },
        "before": Object {
          "in": "header",
          "name": "new-param",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": "cannot make parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": false,
    "received": undefined,
    "where": "changed header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "header",
          "name": "new-param",
        },
        "before": Object {
          "in": "header",
          "name": "new-param",
          "required": true,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": true,
    "received": undefined,
    "where": "changed header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "header",
          "name": "new-param",
          "required": true,
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": "required parameter cannot be removed",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": false,
    "received": undefined,
    "where": "removed header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "header",
          "name": "new-param",
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": true,
    "received": undefined,
    "where": "removed header parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "value": Object {
        "in": "header",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for header parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule headerParameter assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "header": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "header",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "header-parameter",
      },
      "value": Object {
        "description": "hello",
        "in": "header",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for header parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "path",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "added path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "in": "path",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "added path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "path",
          "name": "new-param",
          "required": true,
        },
        "before": Object {
          "in": "path",
          "name": "new-param",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": "cannot make parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": false,
    "received": undefined,
    "where": "changed path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "path",
          "name": "new-param",
        },
        "before": Object {
          "in": "path",
          "name": "new-param",
          "required": true,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": true,
    "received": undefined,
    "where": "changed path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "path",
          "name": "new-param",
          "required": true,
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": "required parameter cannot be removed",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": false,
    "received": undefined,
    "where": "removed path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "path",
          "name": "new-param",
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": true,
    "received": undefined,
    "where": "removed path parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
      "value": Object {
        "in": "path",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for path parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule pathParameter assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "path",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "path-parameter",
      },
      "value": Object {
        "description": "hello",
        "in": "path",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for path parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "in": "query",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "added query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "hello",
        "in": "query",
        "name": "new-param",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "added query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "new-param",
          "required": true,
        },
        "before": Object {
          "in": "query",
          "name": "new-param",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": "cannot make parameter required",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": false,
    "received": undefined,
    "where": "changed query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "new-param",
        },
        "before": Object {
          "in": "query",
          "name": "new-param",
          "required": true,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
    },
    "condition": "must not make parameter required",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "optional to required parameter",
    "passed": true,
    "received": undefined,
    "where": "changed query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "query",
          "name": "new-param",
          "required": true,
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": "required parameter cannot be removed",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": false,
    "received": undefined,
    "where": "removed query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "new-param",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "new-param",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "removed": Object {
        "before": Object {
          "in": "query",
          "name": "new-param",
        },
      },
    },
    "condition": "cannot remove a required parameter",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "removed parameters",
    "passed": true,
    "received": undefined,
    "where": "removed query parameter: new-param in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": Object {
        "in": "query",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": "parameter does not have \`description\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": false,
    "received": undefined,
    "where": "requirement for query parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule queryParameter assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "hello",
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "parameters",
          "query",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/parameters/0",
        "kind": "query-parameter",
      },
      "value": Object {
        "description": "hello",
        "in": "query",
        "name": "hello",
      },
    },
    "condition": "must contain a description",
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "parameter description",
    "passed": true,
    "received": undefined,
    "where": "requirement for query parameter: hello in operation: GET /api/users",
  },
]
`;

exports[`OperationRule rulesContext after 1`] = `
Object {
  "custom": Object {},
  "operation": Object {
    "change": "added",
    "cookieParameters": Map {},
    "headerParameters": Map {},
    "location": Object {
      "conceptualLocation": Object {
        "method": "get",
        "path": "/api/users",
      },
      "conceptualPath": Array [
        "operations",
        "/api/users",
        "get",
      ],
      "jsonPath": "/paths/~1api~1users/get",
      "kind": "operation",
    },
    "method": "get",
    "path": "/api/users",
    "pathParameters": Map {},
    "queryParameters": Map {},
    "raw": Object {
      "description": "hello",
      "responses": Object {},
    },
    "requests": Array [],
    "responses": Map {},
    "value": Object {
      "description": "hello",
      "method": "get",
      "pathPattern": "/api/users",
    },
  },
  "specification": Object {
    "change": "changed",
    "location": Object {
      "conceptualLocation": Object {},
      "conceptualPath": Array [],
      "jsonPath": "",
      "kind": "specification",
    },
    "raw": Object {
      "info": Object {
        "title": "Empty",
        "version": "0.0.0",
      },
      "openapi": "3.1.3",
      "paths": Object {
        "/api/users": Object {
          "get": Object {
            "description": "hello",
            "responses": Object {},
          },
        },
      },
      "servers": Array [
        Object {
          "url": "http://optic.com",
        },
      ],
    },
    "value": Object {
      "info": Object {
        "title": "Empty",
        "version": "0.0.0",
      },
      "openapi": "3.1.3",
      "servers": Array [
        Object {
          "url": "http://optic.com",
        },
      ],
    },
  },
}
`;

exports[`OperationRule rulesContext before 1`] = `
Object {
  "custom": Object {},
  "operation": Object {
    "change": "removed",
    "cookieParameters": Map {},
    "headerParameters": Map {},
    "location": Object {
      "conceptualLocation": Object {
        "method": "get",
        "path": "/api/users",
      },
      "conceptualPath": Array [
        "operations",
        "/api/users",
        "get",
      ],
      "jsonPath": "/paths/~1api~1users/get",
      "kind": "operation",
    },
    "method": "get",
    "path": "/api/users",
    "pathParameters": Map {},
    "queryParameters": Map {},
    "raw": Object {
      "description": "hello",
      "responses": Object {},
    },
    "requests": Array [],
    "responses": Map {},
    "value": Object {
      "description": "hello",
      "method": "get",
      "pathPattern": "/api/users",
    },
  },
  "specification": Object {
    "change": "changed",
    "location": Object {
      "conceptualLocation": Object {},
      "conceptualPath": Array [],
      "jsonPath": "",
      "kind": "specification",
    },
    "raw": Object {
      "info": Object {
        "title": "Empty",
        "version": "0.0.0",
      },
      "openapi": "3.1.3",
      "paths": Object {
        "/api/users": Object {
          "get": Object {
            "description": "hello",
            "responses": Object {},
          },
        },
      },
      "servers": Array [
        Object {
          "url": "http://optic.com",
        },
      ],
    },
    "value": Object {
      "info": Object {
        "title": "Empty",
        "version": "0.0.0",
      },
      "openapi": "3.1.3",
      "servers": Array [
        Object {
          "url": "http://optic.com",
        },
      ],
    },
  },
}
`;
