// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RequestRule body assertions added failing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {},
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "request does not have \`type\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions added passing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions addedOrChanged failing assertion 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "contentType": "application/json",
          "flatSchema": {
            "description": "empty",
          },
        },
        "before": {
          "contentType": "application/json",
          "flatSchema": {},
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "request does not have \`type\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "changed",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions addedOrChanged passing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions changed failing assertion 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "contentType": "application/json",
          "flatSchema": {
            "type": "object",
          },
        },
        "before": {
          "contentType": "application/json",
          "flatSchema": {
            "type": "array",
          },
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "request must not change type",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request shape",
    "passed": false,
    "received": undefined,
    "type": "changed",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions changed passing assertion 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "contentType": "application/json",
          "flatSchema": {
            "description": "abc",
            "type": "array",
          },
        },
        "before": {
          "contentType": "application/json",
          "flatSchema": {
            "description": "123",
            "type": "array",
          },
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request shape",
    "passed": true,
    "received": undefined,
    "type": "changed",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matches failing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "Expected a partial match",
    "exempted": false,
    "expected": "{"schema":{"type":"object","properties":{"id":{"type":"string"}}}}",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": "{"schema":{"type":"object","properties":{"notid":{"type":"string"},"name":{"type":"string"}}}}",
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matches inverted assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matches passing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matchesOneOf failing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "Expected at least one partial match",
    "exempted": false,
    "expected": "[{"schema":{"type":"object","properties":{"id":{"type":"string"}}}},{"schema":{"type":"array","items":{}}}]",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": "{"schema":{"type":"object","properties":{"notid":{"type":"string"},"name":{"type":"string"}}}}",
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matchesOneOf inverted assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions custom matchers matchesOneOf passing assertion 1`] = `
[
  {
    "change": {
      "added": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "added",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions removed failing assertion 1`] = `
[
  {
    "change": {
      "changeType": "removed",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "removed": {
        "before": {
          "contentType": "application/json",
          "flatSchema": {
            "type": "array",
          },
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "cannot remove bodies with array schema",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": false,
    "received": undefined,
    "type": "removed",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions removed passing assertion 1`] = `
[
  {
    "change": {
      "changeType": "removed",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "removed": {
        "before": {
          "contentType": "application/json",
          "flatSchema": {
            "type": "string",
          },
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": true,
    "received": undefined,
    "type": "removed",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions requirement failing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {},
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "request body does not have \`type\`",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule body assertions requirement passing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "string",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json",
  },
]
`;

exports[`RequestRule property assertions added failing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {},
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "field does not have \`type\`",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;

exports[`RequestRule property assertions added passing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;

exports[`RequestRule property assertions addedOrChanged failing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "description": "asd",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "field does not have \`type\`",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;

exports[`RequestRule property assertions addedOrChanged passing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;

exports[`RequestRule property assertions changed failing assertion 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "type": "number",
          },
          "key": "hello",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "format": "uuid",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "items",
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "items",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/items/properties/hello",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "must not change type",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "property type",
    "passed": false,
    "received": undefined,
    "type": "changed",
    "where": "GET /api/users request body: application/json property: items/hello",
  },
]
`;

exports[`RequestRule property assertions changed passing assertion 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "format": "date",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "format": "uuid",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "items",
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "items",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/items/properties/hello",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "property type",
    "passed": true,
    "received": undefined,
    "type": "changed",
    "where": "GET /api/users request body: application/json property: items/hello",
  },
]
`;

exports[`RequestRule property assertions removed failing assertion 1`] = `
[
  {
    "change": {
      "changeType": "removed",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "goodbye",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "goodbye",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/goodbye",
        "kind": "field",
      },
      "removed": {
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "goodbye",
          "required": true,
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "cannot remove bodies with array schema",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": false,
    "received": undefined,
    "type": "removed",
    "where": "GET /api/users request body: application/json property: goodbye",
  },
]
`;

exports[`RequestRule property assertions removed passing assertion 1`] = `
[
  {
    "change": {
      "changeType": "removed",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "goodbye",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "goodbye",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/goodbye",
        "kind": "field",
      },
      "removed": {
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "goodbye",
          "required": false,
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": true,
    "received": undefined,
    "type": "removed",
    "where": "GET /api/users request body: application/json property: goodbye",
  },
]
`;

exports[`RequestRule property assertions requirement failing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {},
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "field does not have \`type\`",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;

exports[`RequestRule property assertions requirement passing assertion 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "received": undefined,
    "type": "requirement",
    "where": "GET /api/users request body: application/json property: hello",
  },
]
`;
