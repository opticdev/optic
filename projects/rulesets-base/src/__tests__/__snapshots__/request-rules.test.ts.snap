// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RequestRule body assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "contentType": "application/json",
        "flatSchema": Object {},
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": "request does not have \`type\`",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "where": "added request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "contentType": "application/json",
        "flatSchema": Object {
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "where": "added request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "type": "object",
          },
        },
        "before": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "type": "array",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": "must not change root body shape",
    "docsLink": undefined,
    "error": "request must not change type",
    "isMust": true,
    "isShould": false,
    "name": "request shape",
    "passed": false,
    "where": "changed request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "description": "abc",
            "type": "array",
          },
        },
        "before": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "description": "123",
            "type": "array",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
    },
    "condition": "must not change root body shape",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request shape",
    "passed": true,
    "where": "changed request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "removed": Object {
        "before": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "type": "array",
          },
        },
      },
    },
    "condition": "cannot remove bodies with array schema",
    "docsLink": undefined,
    "error": "cannot remove bodies with array schema",
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": false,
    "where": "removed request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "removed": Object {
        "before": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "type": "string",
          },
        },
      },
    },
    "condition": "cannot remove bodies with array schema",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": true,
    "where": "removed request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "body": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "method": "get",
            "path": "/api/users",
          },
          "conceptualPath": Array [
            "operations",
            "/api/users",
            "get",
            "application/json",
          ],
          "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
          "kind": "body",
        },
        "raw": Object {
          "schema": Object {},
        },
        "value": Object {
          "contentType": "application/json",
          "flatSchema": Object {},
        },
      },
      "contentType": "application/json",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {},
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "requestBody",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody",
        "kind": "request",
      },
      "properties": Map {},
      "raw": Object {
        "content": Object {
          "application/json": Object {
            "schema": Object {},
          },
        },
      },
      "value": Object {},
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": "request body does not have \`type\`",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "where": "requirement for request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule body assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "body": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "method": "get",
            "path": "/api/users",
          },
          "conceptualPath": Array [
            "operations",
            "/api/users",
            "get",
            "application/json",
          ],
          "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json",
          "kind": "body",
        },
        "raw": Object {
          "schema": Object {
            "type": "string",
          },
        },
        "value": Object {
          "contentType": "application/json",
          "flatSchema": Object {
            "type": "string",
          },
        },
      },
      "contentType": "application/json",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {},
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "requestBody",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody",
        "kind": "request",
      },
      "properties": Map {},
      "raw": Object {
        "content": Object {
          "application/json": Object {
            "schema": Object {
              "type": "string",
            },
          },
        },
      },
      "value": Object {},
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "where": "requirement for request with content-type: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions added failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "raw": Object {},
      "value": Object {
        "flatSchema": Object {},
        "key": "hello",
        "required": false,
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": "field does not have \`type\`",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "where": "requirement for property: hello request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions added passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "raw": Object {
        "type": "string",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "where": "requirement for property: hello request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions changed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "type": "number",
          },
          "key": "hello",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "format": "uuid",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "items",
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "items",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/items/properties/hello",
        "kind": "field",
      },
    },
    "condition": "must not change property type",
    "docsLink": undefined,
    "error": "must not change type",
    "isMust": true,
    "isShould": false,
    "name": "property type",
    "passed": false,
    "where": "changed property: items/hello request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions changed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "flatSchema": Object {
            "format": "date",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
        "before": Object {
          "flatSchema": Object {
            "format": "uuid",
            "type": "string",
          },
          "key": "hello",
          "required": false,
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "items",
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "items",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/items/properties/hello",
        "kind": "field",
      },
    },
    "condition": "must not change property type",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "property type",
    "passed": true,
    "where": "changed property: items/hello request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions removed failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "goodbye",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "goodbye",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/goodbye",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "goodbye",
          "required": true,
        },
      },
    },
    "condition": "cannot remove bodies required property",
    "docsLink": undefined,
    "error": "cannot remove bodies with array schema",
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": false,
    "where": "removed property: goodbye request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions removed passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "goodbye",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "goodbye",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/goodbye",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "goodbye",
          "required": false,
        },
      },
    },
    "condition": "cannot remove bodies required property",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request removal",
    "passed": true,
    "where": "removed property: goodbye request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions requirement failing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "raw": Object {},
      "value": Object {
        "flatSchema": Object {},
        "key": "hello",
        "required": false,
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": "field does not have \`type\`",
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": false,
    "where": "requirement for property: hello request body: application/json in operation: GET /api/users",
  },
]
`;

exports[`RequestRule property assertions requirement passing assertion 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "hello",
          ],
          "method": "get",
          "path": "/api/users",
        },
        "conceptualPath": Array [
          "operations",
          "/api/users",
          "get",
          "application/json",
          "hello",
        ],
        "jsonPath": "/paths/~1api~1users/get/requestBody/content/application~1json/schema/properties/hello",
        "kind": "field",
      },
      "raw": Object {
        "type": "string",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "hello",
        "required": false,
      },
    },
    "condition": "must contain a type",
    "docsLink": undefined,
    "error": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request type",
    "passed": true,
    "where": "requirement for property: hello request body: application/json in operation: GET /api/users",
  },
]
`;
