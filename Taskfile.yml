# https://taskfile.dev/#/installation
version: '3'

includes:
  openapi-utilities:
    taskfile: projects/openapi-utilities/Taskfile.yml
    dir: projects/openapi-utilities

tasks:
  default:
    desc: Perform a clean build
    cmds:
      - task: setup
      - task: clean
      - task: build

  setup:
    desc: Install dependencies
    cmds:
      - yarn install

  build:
    desc: Build
    cmds:
      - yarn workspaces foreach -pv --topological-dev --no-private run ws:build

  clean:
    desc: Clean
    cmds:
      - yarn workspaces foreach -pv --no-private run ws:clean

  test:
    desc: Test
    cmds:
      - yarn workspaces foreach -pv --no-private run ws:test

  update-snapshots:
    desc: Update snapshots
    cmds:
      - yarn workspaces foreach -pv --no-private run ws:test -u

  publish:
    desc: "Publish built artifacts. Passes CLI_ARGS to 'npm publish'"
    cmds:
      - yarn workspaces foreach -v --no-private npm publish --access public {{.CLI_ARGS}}

  #
  # container image build tasks
  #
  docker:setup:
    cmds:
      - >
        docker buildx create
        --name optic-multiplatform-builder
        --platform linux/amd64,linux/arm64
    status:
      - docker buildx ls | grep -Eq optic-multiplatform-builder

  docker:build:local:
    desc: Build an Optic image for your platform
    summary: |
      Build an Optic image for your platform

      Most useful for produce a single-platform build for local use. Builds intended
      for publishing should use `docker:build:release`.
    cmds:
      - >
        docker build {{.CLI_ARGS}}
        --tag docker.io/useoptic/optic:local
        .

  docker:build:release:
    desc: Build an Optic image for all supported platforms, suitable for publishing
    summary: |
      Build an Optic image for all supported platforms.

      The version of Optic installed and the image tag is determined by the value of OPTIC_CLI_VERSION.
      .CLI_ARGS are appended to the command. To publish images to DockerHub include `--push`.

      example:
       task docker:build:release OPTIC_CLI_VERSION=0.28.1 -- --push
    deps:
      - docker:setup
    vars:
      OPTIC_CLI_VERSION: '{{.OPTIC_CLI_VERSION | default "latest"}}'
    cmds:
      - >
        docker buildx build {{.CLI_ARGS}}
        --tag useoptic/optic:{{.OPTIC_CLI_VERSION}}
        --tag useoptic/optic:latest
        --platform linux/amd64,linux/arm64
        --builder optic-multiplatform-builder
        --build-arg OPTIC_CLI_VERSION={{.OPTIC_CLI_VERSION}}
        .
