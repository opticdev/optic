# Releases the latest version of Optic on NPM/Brew/Debian
# Assumes the version has been updated
# Triggers on all changes to the release branch

name: Release

env:
  BUCKET_NAME: optic-packages
  PACKAGE_NAME: api
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  RELEASE_WORKFLOW_DRY_RUN: false

on:
  push:
    branches:
      - release
      - develop

jobs:
  release_logic:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.should_publish.outputs.should_publish }}
      is_prerelease: ${{ steps.release_type.outputs.is_prerelease }}
      prerelease_tag: ${{ steps.prerelease_tag.outputs.prerelease_tag }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # https://github.com/actions/checkout/releases/tag/v2.3.3
      - uses: actions/setup-node@56899e050abffc08c2b3b61f3ec6a79a9dc3223d # https://github.com/actions/setup-node/releases/tag/v1.4.4
        with:
          node-version: 12
      - name: Set version output
        id: version
        run: |
          OPTIC_VERSION=$(node -e "console.log(require('./workspaces/local-cli/package.json').version)")
          echo "OPTIC_VERSION=$OPTIC_VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$OPTIC_VERSION"
      - name: 'Caching node modules'
        uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/releases/tag/v2.1.2
        with:
          path: |
            **/node_modules
          key: "${{ runner.os }}-npm-${{ hashFiles('**/yarn.lock') }}-vendor-v1"
      - name: Set is_prerelease output
        id: release_type
        run: |
          if [[ $OPTIC_VERSION == *'-'* ]]; then
            echo "v$OPTIC_VERSION is a prerelease"
            echo "::set-output name=is_prerelease::true"
          else
            echo "v$OPTIC_VERSION is not a prerelease"
            echo "::set-output name=is_prerelease::false"
          fi
      - name: Set prerelease_tag output
        id: prerelease_tag
        run: |
          source sourceme.sh && optic_install_dependencies
          PRERELEASE_TAG=$(node workspaces/scripts/prerelease-tag $OPTIC_VERSION)
          echo "::set-output name=prerelease_tag::$PRERELEASE_TAG"
      - name: Set should_publish output
        id: should_publish
        run: |
          echo Should we publish $OPTIC_VERSION from $GITHUB_REF?
          RELEASED_VERSION=$(npm view @useoptic/cli@$OPTIC_VERSION version)
          if ! [[ -z $RELEASED_VERSION ]]; then
            echo "v$OPTIC_VERSION already published, should not publish again"
            echo "::set-output name=should_publish::false"
          elif [ "${{ steps.release_type.outputs.is_prerelease }}" = "false" ] && [ $GITHUB_REF != "refs/heads/release" ] && [ $RELEASE_WORKFLOW_DRY_RUN = "false" ]; then
            echo "Only prereleases should be published from branches other than release"
            echo "::set-output name=should_publish::false"
          else
            echo "::set-output name=should_publish::true"
          fi

  build-rust-binaries:
    if: needs.release_logic.outputs.should_publish == 'true'
    needs: release_logic
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_name: macos
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_name: win64
            suffix: .exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_name: linux
            suffix: ''
    runs-on: ${{ matrix.os }}
    env:
      FILE_NAME: optic_diff${{ matrix.suffix }}
    steps:
      - name: 'Checkout source'
        uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # https://github.com/actions/checkout/releases/tag/v2.3.3
      - uses: actions/setup-node@56899e050abffc08c2b3b61f3ec6a79a9dc3223d # https://github.com/actions/setup-node/releases/tag/v1.4.4
        with:
          node-version: 12
      - name: 'Determine version and archive name'
        shell: bash
        run: |
          OPTIC_VERSION=${{ needs.release_logic.outputs.version }}
          echo "OPTIC_VERSION=$OPTIC_VERSION" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=optic_diff-v$OPTIC_VERSION-${{ matrix.platform_name }}" >> $GITHUB_ENV
      - name: 'Set CARGO_HOME and RUSTUP_HOME'
        run: |
          echo "RUSTUP_HOME=$HOME/.rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=$HOME/.cargo" >> $GITHUB_ENV
      - name: 'Cache cargo registry'
        uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/releases/tag/v2.1.2
        with:
          path: |
            ${{ env.CARGO_HOME }}/registry
            ${{ env.CARGO_HOME }}/git
          key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-vendor-v1"
      - name: 'Cache build target'
        uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/releases/tag/v2.1.2
        with:
          path: target
          key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-release-target-v1"
      - name: 'Rust toolchain'
        uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f # https://github.com/actions-rs/toolchain/releases/tag/v1.0.6
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: 'Build'
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b # https://github.com/actions-rs/cargo/releases/tag/v1.0.1
        with:
          command: build
          args: --workspace --release --target=${{ matrix.target }}
      - name: 'Flush Cargo cache to disk on macOS'
        if: runner.os == 'macOS'
        run: sudo /usr/sbin/purge
      - name: 'Upload artifact'
        uses: actions/upload-artifact@27bce4eee761b5bc643f46a8dfb41b430c8d05f6 # https://github.com/actions/upload-artifact/releases/tag/v2
        with:
          name: ${{ env.ARCHIVE_NAME }}-build
          path: target/${{ matrix.target }}/release/${{ env.FILE_NAME }}

  publish-binaries:
    strategy:
      matrix:
        include:
          - platform_name: macos
            suffix: ''
          - platform_name: win64
            suffix: .exe
          - platform_name: linux
            suffix: ''
    runs-on: ubuntu-latest
    needs: [release_logic, build-rust-binaries]
    env:
      FILE_NAME: optic_diff${{ matrix.suffix }}
      BUCKET: optic-packages
    steps:
      - uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # https://github.com/actions/checkout/releases/tag/v2.3.3
      - uses: actions/setup-node@56899e050abffc08c2b3b61f3ec6a79a9dc3223d # https://github.com/actions/setup-node/releases/tag/v1.4.4
        with:
          node-version: 12
      - name: 'Determine version and archive name'
        run: |
          OPTIC_VERSION=${{ needs.release_logic.outputs.version }}
          echo "OPTIC_VERSION=$OPTIC_VERSION" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=optic_diff-v$OPTIC_VERSION-${{ matrix.platform_name }}" >> $GITHUB_ENV
      - name: Prepare directory structure
        run: |
          mkdir -p build/$ARCHIVE_NAME
          mkdir dist
      - name: Download binary
        uses: actions/download-artifact@c3f5d00c8784369c43779f3d2611769594a61f7a # https://github.com/actions/download-artifact/releases/tag/v2
        with:
          name: ${{ env.ARCHIVE_NAME }}-build
          path: build/${{ env.ARCHIVE_NAME }}
      - name: 'Package binary'
        run: |
          chmod +x build/$ARCHIVE_NAME/$FILE_NAME
          tar -C build -czvf dist/$ARCHIVE_NAME.tar.gz $ARCHIVE_NAME
      - name: 'Debug archives'
        run: |
          ls -lsa dist
          ls -lsa build
          tar -xzvf dist/$ARCHIVE_NAME.tar.gz -C dist
          ls -lsa dist
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@32d908adfb55576ba0c59f3c557058e80b5194c3 # https://github.com/aws-actions/configure-aws-credentials/releases/tag/v1.5.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
      - name: 'Upload to S3'
        if: env.RELEASE_WORKFLOW_DRY_RUN == 'false'
        run: |
          aws s3 cp dist/$ARCHIVE_NAME.tar.gz s3://$BUCKET/dists/optic_diff/v$OPTIC_VERSION/$ARCHIVE_NAME.tar.gz --sse=AES256 --acl=public-read

  # Deploys the current version to NPM, and also verifies that the version is correct in the process
  # All Jobs rely on this job because it verifies the version
  release-npm:
    if: needs.release_logic.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    needs: [publish-binaries, release_logic]
    steps:
    - uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # https://github.com/actions/checkout/releases/tag/v2.3.3
      # with:
      #   ref: release
    - uses: actions/setup-node@56899e050abffc08c2b3b61f3ec6a79a9dc3223d # https://github.com/actions/setup-node/releases/tag/v1.4.4
      with:
        node-version: 12
    - name: 'Caching node modules'
      uses: actions/cache@d1255ad9362389eac595a9ae406b8e8cb3331f16 # https://github.com/actions/cache/releases/tag/v2.1.2
      with:
        path: |
          **/node_modules
        key: "${{ runner.os }}-npm-${{ hashFiles('**/yarn.lock') }}-vendor-v1"
    - name: Install Dependencies and Build Optic
      run:  |
        if [ "${{ needs.release_logic.outputs.is_prerelease }}" == "true" ] && [ -n "${{ needs.release_logic.outputs.prerelease_tag }}" ]; then
          echo "Prelease with a tag detected. Staging any feature flags for '${{ needs.release_logic.outputs.prerelease_tag }}'."
          RELEASE_CHANNEL=${{ needs.release_logic.outputs.prerelease_tag }}
        elif [[ "${{ needs.release_logic.outputs.is_prerelease }}" == "true" ]]; then
          echo "Prelease without a tag detected. Staging feature flags for 'prerelease'."
          RELEASE_CHANNEL=prerelease
        else
          echo "Stable release detected. Staging feature flags for 'latest'."
          RELEASE_CHANNEL=latest
        fi

        FLAGS_FILE=.env.$RELEASE_CHANNEL
        echo "OPTIC__NPM__VERSION=${{ needs.release_logic.outputs.version }}" >> "$FLAGS_FILE"
        if [[ -r $FLAGS_FILE ]]; then
          echo "Feature flags found for $RELEASE_CHANNEL, staging for build and runtime."
          cp $FLAGS_FILE .env
          cp $FLAGS_FILE workspaces/agent-cli/.env
          cp $FLAGS_FILE workspaces/ci-cli/.env
          cp $FLAGS_FILE workspaces/local-cli/.env
          cp $FLAGS_FILE workspaces/cli-server/.env
          cp $FLAGS_FILE workspaces/cli-scripts/.env
          cp $FLAGS_FILE workspaces/diff-engine/.env
          cp $FLAGS_FILE workspaces/ui/.env.production.local
        fi

        if [[ -r .env ]]; then
          echo "Feature flags staged:"
          cat .env
          echo ""
        else 
          echo "No feature flags staged"
        fi

        source ./sourceme.sh && optic_build_for_release
    - run: echo "//registry.npmjs.org/:_authToken=${{ secrets.PUBLISH_NPM_OPTIC_BOT }}" > ~/.npmrc
    - run: node ./workspaces/scripts/publish.js
      env:
        OPTIC_PUBLISH_SCOPE: public
      if: env.RELEASE_WORKFLOW_DRY_RUN == 'false'

  # Creates debian package for users to install, hosted on s3
  release-deb:
    runs-on: ubuntu-latest
    needs: [release_logic, release-npm]
    if: needs.release_logic.outputs.is_prerelease == 'false'
    steps:
      - run: |
          echo "determined as not a prerelease" 
          echo "is_prelease=${{ needs.release-npm.outputs.is_prerelease }}"
      - uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 # https://github.com/actions/checkout/releases/tag/v2.3.3
        with:
          ref: release
      - uses: ./.github/deployDebian/ # locally defined action
        if: env.RELEASE_WORKFLOW_DRY_RUN == 'false'
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: optic-packages
          PACKAGE_NAME: api
          PREFIX_NAME: deb
          NPM_PACKAGE_NAME: "@useoptic/cli"

  # Triggers Homebrew Release - Configure homebrew/core fork repository in the env settings above
  # Requires Repository Access Token (https://github.com/peter-evans/repository-dispatch#token) with repo:write scope
  trigger-brew-release:
    runs-on: ubuntu-latest
    needs: [release_logic, release-npm]
    if: needs.release_logic.outputs.is_prerelease == 'false'
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@95531d6358eb144ac65db1d7f39af794979ea97e # https://github.com/peter-evans/repository-dispatch/releases/tag/v1.1.2
        if: env.RELEASE_WORKFLOW_DRY_RUN == 'false'
        with:
          token: ${{ secrets.HOMEBREW_UTILITY_ACCOUNT }}
          repository: opticdev/homebrew-optic
          event-type: version-update
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

  # Tells slack a release has happened
  notify-slack:
    runs-on: ubuntu-latest
    needs: [release_logic, release-npm]
    name: Message Slack that Release has happened
    steps:
      - uses: actions/setup-node@56899e050abffc08c2b3b61f3ec6a79a9dc3223d # https://github.com/actions/setup-node/releases/tag/v1.4.4
        name: Setup Node (to determine latest version of Optic)
        with:
            node-version: 12
      - run: |
          MESSAGE="${{ github.event.pusher.name }} released version ${{ needs.release_logic.outputs.version }}"
          if [[ "${{ needs.release_logic.outputs.is_prerelease }}" == "true" ]]; then
            MESSAGE="$MESSAGE \n This is a prerelease only <https://www.npmjs.com/package/@useoptic/cli/v/${{ needs.release_logic.outputs.version }}|published to npm>. Only users who explicitly opted in by installing this or preceding prereleases in this set will be affected. "
          else
            MESSAGE="$MESSAGE \n Publish Release Notes <https://github.com/opticdev/optic/releases|here>"            
          fi
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
      - name: Send message to Slack API
        if: env.RELEASE_WORKFLOW_DRY_RUN == 'false'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ env.MESSAGE }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}
