{
    "commandProcess": {
        "title": "Your `command` starts a long-running process",
        "shortTitle": "starts a long-running process",
        "resolution": "The `command` provided in your `optic.yml` file exited before Optic could start. It must: \n\n- Start a long-running process (your API) that stays running until exited.  \n- Be runnable from the same directory as the `optic.yml` file without any special permissions.\n\nTry running the `command` manually from your current directory to make sure it starts your API. This assures the command is the correct one, and you can observe the results directly.\n\n- If this is not the right command for Optic to start your API, update the one in the `optic.yml` file and try again.\n- If your command starts the server in the background (Docker detach style), you may consider using a [manual configuration](https://app.useoptic.com).\n"
    },
    "commandHost": {
        "title": "Your `command` starts a long-running process on the host Optic assigns it",
        "shortTitle": "starts a long-running process on the host Optic assigns it",
        "resolution": "By default when using the `command` parameter, Optic expects your API to be running on localhost alongside the Optic proxy. You shouldn't have to configure this in a recommended workflow.\n\n- If your API runs on localhost, but uses a different hostname: check your custom hostname mapping (such as in `/etc/hosts`) to assure it is properly resolving to localhost.\n- If your API doesn't run on localhost: Consider a [manual configuration](https://app.useoptic.com) which will let you target another host (such as a cloud-based API gateway).\n"
    },
    "commandPort": {
        "title": "Your `command` starts a long-running process on the port Optic assigns it",
        "shortTitle": "starts a long-running process on the port Optic assigns it",
        "resolution": "Every time you run api start, Optic assigns your API a random port. If you get this error, it means that your command runs, but the API is not binding to the `$OPTIC_API_PORT` within 25 seconds of Optic running your command.\n\n- If you can set the port on which your API listens from the command line: make sure the `command` parameter of your task definition in `optic.yml` includes `$OPTIC_API_PORT`.\n  - For example, `rails -s` becomes `rails -s --port $OPTIC_API_PORT`.\n- If you can't set the port from the command line: update your code to bind to the port Optic provides via the `$OPTIC_API_PORT` environment variable.\n- If your application takes more than 25 seconds to warm up, the `api check` will always fail. As long as all other checks have passed, try using `api run` directly and wait for your application to warm up.\n"
    },
    "inboundUrlStart": {
        "title": "Given an `inboundUrl` Optic starts the proxy at this URL",
        "shortTitle": "starts the Optic proxy at this URL",
        "resolution": "An error here inicates Optic cannot start its proxy on this URL. Optic expects to start on the localhost at a port you specify with the `inboundUrl` parameter. This is where incoming traffic to your API will be sent, so Optic can observe the requests and responses. If the Optic proxy cannot start here:\n\n- If you want to run Optic on localhost, but uses a different hostname: check your custom hostname mapping (such as in `/etc/hosts`) to assure it is properly resolving to localhost.\n- Make sure the port is available (nothing else is bound to it). For example, your existing API project may still be listening to this port. Stop any currently running applications using this port, or change the port.\n  - For example, on MacOS: `sudo lsof -i -P -n | grep LISTEN` will show all applications listening on localhost, and the second column will give you the process ID.\n- If the port is in use and cannot be freed, change the port in the `inboundUrl` parameter of your task in `optic.yml`. \n"
    },
    "targetUrlResolve": {
        "title": "Given a `targetURL` Optic is able to connect to the service",
        "shortTitle": "allows Optic to connect to the service",
        "resolution": "Optic makes a quick check of the targetUrl provided to assure it can connect to the service. Optic does not check to see for valid API traffic, it only tests connectivity to the provided URL.\n\n- Is your service running on the given host at the given port? You can validate this with a tool like netcat (MacOS, Linux) or Test-NetConnection (Powershell). For example, if your service is running on MacOS at `localhost:3000`, run ```nc -zvw3 localhost 3000```. A successful connection in this example will report *Connection to localhost port 3000 [tcp/hbci] succeeded!*\n- Does your service listen on the proper protocol? If you've specified a protocol (`http://` or `https://`) and did not specify a port, make sure your service is listening appropriately (port 80 or 443)\n- If this is a custom hostname: check your custom hostname mapping (such as in `/etc/hosts`) to assure it is properly resolving.\n- Try to resolve the host on your command line. For example, if your targetUrl is `https://app.example.com`, you can use `dig app.example.com` on most platforms. This should return a valid DNS record.\n"
    }
}